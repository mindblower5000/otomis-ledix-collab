(*********************************************************************)
(***********************************************************)
(*  FILE_LAST_MODIFIED_ON: 06/27/2008  AT: 09:49:10        *)
(***********************************************************)
(*  AMX Corporation                                                  *)
(*  Copyright (c) 2000 - 2002 AMX Corporation. All rights reserved.  *)
(*********************************************************************)
(*   please refer to EULA.TXT for software license agreement         *)
(*********************************************************************)
PROGRAM_NAME='UnicodeLib'
(*{{PS_SOURCE_INFO(PROGRAM STATS)                          *)
(***********************************************************)
(*  ORPHAN_FILE_PLATFORM: 0                                *)
(***********************************************************)
(*}}PS_SOURCE_INFO                                         *)
(***********************************************************)
#IF_NOT_DEFINED __UNICODE_LIB__
#DEFINE __UNICODE_LIB__

(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

// Version For Code
CHAR __UNICODE_LIB_VERSION__[]    = '1.0'

// Format Flags
WC_FORMAT_ASCII         = 0
WC_FORMAT_UNICODE       = 1
WC_FORMAT_UNICODE_BE    = 2
WC_FORMAT_UTF8          = 3
WC_FORMAT_TP            = 100

// Longest WC string
#IF_NOT_DEFINED WC_MAX_STRING_SIZE
WC_MAX_STRING_SIZE      = 16000
#END_IF // WC_MAX_STRING_SIZE

// This is how many charaters of WIDECHAR that can be sent to a TP in one command
// G3 takes 64 bytes per command, WIDECHAR data is 4-bytes per character
// For G3, 14*4 = 56, leaves 8 bytes for @UNI',#, (5 fixed)
// G4 takes 200 byte strings, WIDECHAR data is 4-bytes per character
// For G4, 46*4 = 184, leaves 16 bytes for ^UNI-<vt>,0 (7 fixed, 9 for ID)
// Use #DEFINE WC_G3_COMPATIBLE to force G3 compatibility
// Use #DEFINE WC_G4_ONLY to compile-out G3 compatibility
#IF_NOT_DEFINED WC_MAX_G3_STR_LENGTH
WC_MAX_G3_STR_LENGTH		= 14
#END_IF

#IF_NOT_DEFINED WC_MAX_G4_STR_LENGTH
WC_MAX_G4_STR_LENGTH		= 46
#END_IF

(***********************************************************)
(*               VARIABLE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_VARIABLE

// UnicodeData.txt Start
// Upper Case Lookup
VOLATILE CHAR cWCUpperLookup[] =
{
  $00,$61,  // 0061=>0041
  $00,$62,  // 0062=>0042
  $00,$63,  // 0063=>0043
  $00,$64,  // 0064=>0044
  $00,$65,  // 0065=>0045
  $00,$66,  // 0066=>0046
  $00,$67,  // 0067=>0047
  $00,$68,  // 0068=>0048
  $00,$69,  // 0069=>0049
  $00,$6a,  // 006A=>004A
  $00,$6b,  // 006B=>004B
  $00,$6c,  // 006C=>004C
  $00,$6d,  // 006D=>004D
  $00,$6e,  // 006E=>004E
  $00,$6f,  // 006F=>004F
  $00,$70,  // 0070=>0050
  $00,$71,  // 0071=>0051
  $00,$72,  // 0072=>0052
  $00,$73,  // 0073=>0053
  $00,$74,  // 0074=>0054
  $00,$75,  // 0075=>0055
  $00,$76,  // 0076=>0056
  $00,$77,  // 0077=>0057
  $00,$78,  // 0078=>0058
  $00,$79,  // 0079=>0059
  $00,$7a,  // 007A=>005A
  $00,$b5,  // 00B5=>039C
  $00,$e0,  // 00E0=>00C0
  $00,$e1,  // 00E1=>00C1
  $00,$e2,  // 00E2=>00C2
  $00,$e3,  // 00E3=>00C3
  $00,$e4,  // 00E4=>00C4
  $00,$e5,  // 00E5=>00C5
  $00,$e6,  // 00E6=>00C6
  $00,$e7,  // 00E7=>00C7
  $00,$e8,  // 00E8=>00C8
  $00,$e9,  // 00E9=>00C9
  $00,$ea,  // 00EA=>00CA
  $00,$eb,  // 00EB=>00CB
  $00,$ec,  // 00EC=>00CC
  $00,$ed,  // 00ED=>00CD
  $00,$ee,  // 00EE=>00CE
  $00,$ef,  // 00EF=>00CF
  $00,$f0,  // 00F0=>00D0
  $00,$f1,  // 00F1=>00D1
  $00,$f2,  // 00F2=>00D2
  $00,$f3,  // 00F3=>00D3
  $00,$f4,  // 00F4=>00D4
  $00,$f5,  // 00F5=>00D5
  $00,$f6,  // 00F6=>00D6
  $00,$f8,  // 00F8=>00D8
  $00,$f9,  // 00F9=>00D9
  $00,$fa,  // 00FA=>00DA
  $00,$fb,  // 00FB=>00DB
  $00,$fc,  // 00FC=>00DC
  $00,$fd,  // 00FD=>00DD
  $00,$fe,  // 00FE=>00DE
  $00,$ff,  // 00FF=>0178
  $01,$01,  // 0101=>0100
  $01,$03,  // 0103=>0102
  $01,$05,  // 0105=>0104
  $01,$07,  // 0107=>0106
  $01,$09,  // 0109=>0108
  $01,$0b,  // 010B=>010A
  $01,$0d,  // 010D=>010C
  $01,$0f,  // 010F=>010E
  $01,$11,  // 0111=>0110
  $01,$13,  // 0113=>0112
  $01,$15,  // 0115=>0114
  $01,$17,  // 0117=>0116
  $01,$19,  // 0119=>0118
  $01,$1b,  // 011B=>011A
  $01,$1d,  // 011D=>011C
  $01,$1f,  // 011F=>011E
  $01,$21,  // 0121=>0120
  $01,$23,  // 0123=>0122
  $01,$25,  // 0125=>0124
  $01,$27,  // 0127=>0126
  $01,$29,  // 0129=>0128
  $01,$2b,  // 012B=>012A
  $01,$2d,  // 012D=>012C
  $01,$2f,  // 012F=>012E
  $01,$31,  // 0131=>0049
  $01,$33,  // 0133=>0132
  $01,$35,  // 0135=>0134
  $01,$37,  // 0137=>0136
  $01,$3a,  // 013A=>0139
  $01,$3c,  // 013C=>013B
  $01,$3e,  // 013E=>013D
  $01,$40,  // 0140=>013F
  $01,$42,  // 0142=>0141
  $01,$44,  // 0144=>0143
  $01,$46,  // 0146=>0145
  $01,$48,  // 0148=>0147
  $01,$4b,  // 014B=>014A
  $01,$4d,  // 014D=>014C
  $01,$4f,  // 014F=>014E
  $01,$51,  // 0151=>0150
  $01,$53,  // 0153=>0152
  $01,$55,  // 0155=>0154
  $01,$57,  // 0157=>0156
  $01,$59,  // 0159=>0158
  $01,$5b,  // 015B=>015A
  $01,$5d,  // 015D=>015C
  $01,$5f,  // 015F=>015E
  $01,$61,  // 0161=>0160
  $01,$63,  // 0163=>0162
  $01,$65,  // 0165=>0164
  $01,$67,  // 0167=>0166
  $01,$69,  // 0169=>0168
  $01,$6b,  // 016B=>016A
  $01,$6d,  // 016D=>016C
  $01,$6f,  // 016F=>016E
  $01,$71,  // 0171=>0170
  $01,$73,  // 0173=>0172
  $01,$75,  // 0175=>0174
  $01,$77,  // 0177=>0176
  $01,$7a,  // 017A=>0179
  $01,$7c,  // 017C=>017B
  $01,$7e,  // 017E=>017D
  $01,$7f,  // 017F=>0053
  $01,$83,  // 0183=>0182
  $01,$85,  // 0185=>0184
  $01,$88,  // 0188=>0187
  $01,$8c,  // 018C=>018B
  $01,$92,  // 0192=>0191
  $01,$95,  // 0195=>01F6
  $01,$99,  // 0199=>0198
  $01,$9a,  // 019A=>023D
  $01,$9e,  // 019E=>0220
  $01,$a1,  // 01A1=>01A0
  $01,$a3,  // 01A3=>01A2
  $01,$a5,  // 01A5=>01A4
  $01,$a8,  // 01A8=>01A7
  $01,$ad,  // 01AD=>01AC
  $01,$b0,  // 01B0=>01AF
  $01,$b4,  // 01B4=>01B3
  $01,$b6,  // 01B6=>01B5
  $01,$b9,  // 01B9=>01B8
  $01,$bd,  // 01BD=>01BC
  $01,$bf,  // 01BF=>01F7
  $01,$c5,  // 01C5=>01C4
  $01,$c6,  // 01C6=>01C4
  $01,$c8,  // 01C8=>01C7
  $01,$c9,  // 01C9=>01C7
  $01,$cb,  // 01CB=>01CA
  $01,$cc,  // 01CC=>01CA
  $01,$ce,  // 01CE=>01CD
  $01,$d0,  // 01D0=>01CF
  $01,$d2,  // 01D2=>01D1
  $01,$d4,  // 01D4=>01D3
  $01,$d6,  // 01D6=>01D5
  $01,$d8,  // 01D8=>01D7
  $01,$da,  // 01DA=>01D9
  $01,$dc,  // 01DC=>01DB
  $01,$dd,  // 01DD=>018E
  $01,$df,  // 01DF=>01DE
  $01,$e1,  // 01E1=>01E0
  $01,$e3,  // 01E3=>01E2
  $01,$e5,  // 01E5=>01E4
  $01,$e7,  // 01E7=>01E6
  $01,$e9,  // 01E9=>01E8
  $01,$eb,  // 01EB=>01EA
  $01,$ed,  // 01ED=>01EC
  $01,$ef,  // 01EF=>01EE
  $01,$f2,  // 01F2=>01F1
  $01,$f3,  // 01F3=>01F1
  $01,$f5,  // 01F5=>01F4
  $01,$f9,  // 01F9=>01F8
  $01,$fb,  // 01FB=>01FA
  $01,$fd,  // 01FD=>01FC
  $01,$ff,  // 01FF=>01FE
  $02,$01,  // 0201=>0200
  $02,$03,  // 0203=>0202
  $02,$05,  // 0205=>0204
  $02,$07,  // 0207=>0206
  $02,$09,  // 0209=>0208
  $02,$0b,  // 020B=>020A
  $02,$0d,  // 020D=>020C
  $02,$0f,  // 020F=>020E
  $02,$11,  // 0211=>0210
  $02,$13,  // 0213=>0212
  $02,$15,  // 0215=>0214
  $02,$17,  // 0217=>0216
  $02,$19,  // 0219=>0218
  $02,$1b,  // 021B=>021A
  $02,$1d,  // 021D=>021C
  $02,$1f,  // 021F=>021E
  $02,$23,  // 0223=>0222
  $02,$25,  // 0225=>0224
  $02,$27,  // 0227=>0226
  $02,$29,  // 0229=>0228
  $02,$2b,  // 022B=>022A
  $02,$2d,  // 022D=>022C
  $02,$2f,  // 022F=>022E
  $02,$31,  // 0231=>0230
  $02,$33,  // 0233=>0232
  $02,$3c,  // 023C=>023B
  $02,$53,  // 0253=>0181
  $02,$54,  // 0254=>0186
  $02,$56,  // 0256=>0189
  $02,$57,  // 0257=>018A
  $02,$59,  // 0259=>018F
  $02,$5b,  // 025B=>0190
  $02,$60,  // 0260=>0193
  $02,$63,  // 0263=>0194
  $02,$68,  // 0268=>0197
  $02,$69,  // 0269=>0196
  $02,$6f,  // 026F=>019C
  $02,$72,  // 0272=>019D
  $02,$75,  // 0275=>019F
  $02,$80,  // 0280=>01A6
  $02,$83,  // 0283=>01A9
  $02,$88,  // 0288=>01AE
  $02,$8a,  // 028A=>01B1
  $02,$8b,  // 028B=>01B2
  $02,$92,  // 0292=>01B7
  $02,$94,  // 0294=>0241
  $03,$45,  // 0345=>0399
  $03,$ac,  // 03AC=>0386
  $03,$ad,  // 03AD=>0388
  $03,$ae,  // 03AE=>0389
  $03,$af,  // 03AF=>038A
  $03,$b1,  // 03B1=>0391
  $03,$b2,  // 03B2=>0392
  $03,$b3,  // 03B3=>0393
  $03,$b4,  // 03B4=>0394
  $03,$b5,  // 03B5=>0395
  $03,$b6,  // 03B6=>0396
  $03,$b7,  // 03B7=>0397
  $03,$b8,  // 03B8=>0398
  $03,$b9,  // 03B9=>0399
  $03,$ba,  // 03BA=>039A
  $03,$bb,  // 03BB=>039B
  $03,$bc,  // 03BC=>039C
  $03,$bd,  // 03BD=>039D
  $03,$be,  // 03BE=>039E
  $03,$bf,  // 03BF=>039F
  $03,$c0,  // 03C0=>03A0
  $03,$c1,  // 03C1=>03A1
  $03,$c2,  // 03C2=>03A3
  $03,$c3,  // 03C3=>03A3
  $03,$c4,  // 03C4=>03A4
  $03,$c5,  // 03C5=>03A5
  $03,$c6,  // 03C6=>03A6
  $03,$c7,  // 03C7=>03A7
  $03,$c8,  // 03C8=>03A8
  $03,$c9,  // 03C9=>03A9
  $03,$ca,  // 03CA=>03AA
  $03,$cb,  // 03CB=>03AB
  $03,$cc,  // 03CC=>038C
  $03,$cd,  // 03CD=>038E
  $03,$ce,  // 03CE=>038F
  $03,$d0,  // 03D0=>0392
  $03,$d1,  // 03D1=>0398
  $03,$d5,  // 03D5=>03A6
  $03,$d6,  // 03D6=>03A0
  $03,$d9,  // 03D9=>03D8
  $03,$db,  // 03DB=>03DA
  $03,$dd,  // 03DD=>03DC
  $03,$df,  // 03DF=>03DE
  $03,$e1,  // 03E1=>03E0
  $03,$e3,  // 03E3=>03E2
  $03,$e5,  // 03E5=>03E4
  $03,$e7,  // 03E7=>03E6
  $03,$e9,  // 03E9=>03E8
  $03,$eb,  // 03EB=>03EA
  $03,$ed,  // 03ED=>03EC
  $03,$ef,  // 03EF=>03EE
  $03,$f0,  // 03F0=>039A
  $03,$f1,  // 03F1=>03A1
  $03,$f2,  // 03F2=>03F9
  $03,$f5,  // 03F5=>0395
  $03,$f8,  // 03F8=>03F7
  $03,$fb,  // 03FB=>03FA
  $04,$30,  // 0430=>0410
  $04,$31,  // 0431=>0411
  $04,$32,  // 0432=>0412
  $04,$33,  // 0433=>0413
  $04,$34,  // 0434=>0414
  $04,$35,  // 0435=>0415
  $04,$36,  // 0436=>0416
  $04,$37,  // 0437=>0417
  $04,$38,  // 0438=>0418
  $04,$39,  // 0439=>0419
  $04,$3a,  // 043A=>041A
  $04,$3b,  // 043B=>041B
  $04,$3c,  // 043C=>041C
  $04,$3d,  // 043D=>041D
  $04,$3e,  // 043E=>041E
  $04,$3f,  // 043F=>041F
  $04,$40,  // 0440=>0420
  $04,$41,  // 0441=>0421
  $04,$42,  // 0442=>0422
  $04,$43,  // 0443=>0423
  $04,$44,  // 0444=>0424
  $04,$45,  // 0445=>0425
  $04,$46,  // 0446=>0426
  $04,$47,  // 0447=>0427
  $04,$48,  // 0448=>0428
  $04,$49,  // 0449=>0429
  $04,$4a,  // 044A=>042A
  $04,$4b,  // 044B=>042B
  $04,$4c,  // 044C=>042C
  $04,$4d,  // 044D=>042D
  $04,$4e,  // 044E=>042E
  $04,$4f,  // 044F=>042F
  $04,$50,  // 0450=>0400
  $04,$51,  // 0451=>0401
  $04,$52,  // 0452=>0402
  $04,$53,  // 0453=>0403
  $04,$54,  // 0454=>0404
  $04,$55,  // 0455=>0405
  $04,$56,  // 0456=>0406
  $04,$57,  // 0457=>0407
  $04,$58,  // 0458=>0408
  $04,$59,  // 0459=>0409
  $04,$5a,  // 045A=>040A
  $04,$5b,  // 045B=>040B
  $04,$5c,  // 045C=>040C
  $04,$5d,  // 045D=>040D
  $04,$5e,  // 045E=>040E
  $04,$5f,  // 045F=>040F
  $04,$61,  // 0461=>0460
  $04,$63,  // 0463=>0462
  $04,$65,  // 0465=>0464
  $04,$67,  // 0467=>0466
  $04,$69,  // 0469=>0468
  $04,$6b,  // 046B=>046A
  $04,$6d,  // 046D=>046C
  $04,$6f,  // 046F=>046E
  $04,$71,  // 0471=>0470
  $04,$73,  // 0473=>0472
  $04,$75,  // 0475=>0474
  $04,$77,  // 0477=>0476
  $04,$79,  // 0479=>0478
  $04,$7b,  // 047B=>047A
  $04,$7d,  // 047D=>047C
  $04,$7f,  // 047F=>047E
  $04,$81,  // 0481=>0480
  $04,$8b,  // 048B=>048A
  $04,$8d,  // 048D=>048C
  $04,$8f,  // 048F=>048E
  $04,$91,  // 0491=>0490
  $04,$93,  // 0493=>0492
  $04,$95,  // 0495=>0494
  $04,$97,  // 0497=>0496
  $04,$99,  // 0499=>0498
  $04,$9b,  // 049B=>049A
  $04,$9d,  // 049D=>049C
  $04,$9f,  // 049F=>049E
  $04,$a1,  // 04A1=>04A0
  $04,$a3,  // 04A3=>04A2
  $04,$a5,  // 04A5=>04A4
  $04,$a7,  // 04A7=>04A6
  $04,$a9,  // 04A9=>04A8
  $04,$ab,  // 04AB=>04AA
  $04,$ad,  // 04AD=>04AC
  $04,$af,  // 04AF=>04AE
  $04,$b1,  // 04B1=>04B0
  $04,$b3,  // 04B3=>04B2
  $04,$b5,  // 04B5=>04B4
  $04,$b7,  // 04B7=>04B6
  $04,$b9,  // 04B9=>04B8
  $04,$bb,  // 04BB=>04BA
  $04,$bd,  // 04BD=>04BC
  $04,$bf,  // 04BF=>04BE
  $04,$c2,  // 04C2=>04C1
  $04,$c4,  // 04C4=>04C3
  $04,$c6,  // 04C6=>04C5
  $04,$c8,  // 04C8=>04C7
  $04,$ca,  // 04CA=>04C9
  $04,$cc,  // 04CC=>04CB
  $04,$ce,  // 04CE=>04CD
  $04,$d1,  // 04D1=>04D0
  $04,$d3,  // 04D3=>04D2
  $04,$d5,  // 04D5=>04D4
  $04,$d7,  // 04D7=>04D6
  $04,$d9,  // 04D9=>04D8
  $04,$db,  // 04DB=>04DA
  $04,$dd,  // 04DD=>04DC
  $04,$df,  // 04DF=>04DE
  $04,$e1,  // 04E1=>04E0
  $04,$e3,  // 04E3=>04E2
  $04,$e5,  // 04E5=>04E4
  $04,$e7,  // 04E7=>04E6
  $04,$e9,  // 04E9=>04E8
  $04,$eb,  // 04EB=>04EA
  $04,$ed,  // 04ED=>04EC
  $04,$ef,  // 04EF=>04EE
  $04,$f1,  // 04F1=>04F0
  $04,$f3,  // 04F3=>04F2
  $04,$f5,  // 04F5=>04F4
  $04,$f7,  // 04F7=>04F6
  $04,$f9,  // 04F9=>04F8
  $05,$01,  // 0501=>0500
  $05,$03,  // 0503=>0502
  $05,$05,  // 0505=>0504
  $05,$07,  // 0507=>0506
  $05,$09,  // 0509=>0508
  $05,$0b,  // 050B=>050A
  $05,$0d,  // 050D=>050C
  $05,$0f,  // 050F=>050E
  $05,$61,  // 0561=>0531
  $05,$62,  // 0562=>0532
  $05,$63,  // 0563=>0533
  $05,$64,  // 0564=>0534
  $05,$65,  // 0565=>0535
  $05,$66,  // 0566=>0536
  $05,$67,  // 0567=>0537
  $05,$68,  // 0568=>0538
  $05,$69,  // 0569=>0539
  $05,$6a,  // 056A=>053A
  $05,$6b,  // 056B=>053B
  $05,$6c,  // 056C=>053C
  $05,$6d,  // 056D=>053D
  $05,$6e,  // 056E=>053E
  $05,$6f,  // 056F=>053F
  $05,$70,  // 0570=>0540
  $05,$71,  // 0571=>0541
  $05,$72,  // 0572=>0542
  $05,$73,  // 0573=>0543
  $05,$74,  // 0574=>0544
  $05,$75,  // 0575=>0545
  $05,$76,  // 0576=>0546
  $05,$77,  // 0577=>0547
  $05,$78,  // 0578=>0548
  $05,$79,  // 0579=>0549
  $05,$7a,  // 057A=>054A
  $05,$7b,  // 057B=>054B
  $05,$7c,  // 057C=>054C
  $05,$7d,  // 057D=>054D
  $05,$7e,  // 057E=>054E
  $05,$7f,  // 057F=>054F
  $05,$80,  // 0580=>0550
  $05,$81,  // 0581=>0551
  $05,$82,  // 0582=>0552
  $05,$83,  // 0583=>0553
  $05,$84,  // 0584=>0554
  $05,$85,  // 0585=>0555
  $05,$86,  // 0586=>0556
  $1e,$01,  // 1E01=>1E00
  $1e,$03,  // 1E03=>1E02
  $1e,$05,  // 1E05=>1E04
  $1e,$07,  // 1E07=>1E06
  $1e,$09,  // 1E09=>1E08
  $1e,$0b,  // 1E0B=>1E0A
  $1e,$0d,  // 1E0D=>1E0C
  $1e,$0f,  // 1E0F=>1E0E
  $1e,$11,  // 1E11=>1E10
  $1e,$13,  // 1E13=>1E12
  $1e,$15,  // 1E15=>1E14
  $1e,$17,  // 1E17=>1E16
  $1e,$19,  // 1E19=>1E18
  $1e,$1b,  // 1E1B=>1E1A
  $1e,$1d,  // 1E1D=>1E1C
  $1e,$1f,  // 1E1F=>1E1E
  $1e,$21,  // 1E21=>1E20
  $1e,$23,  // 1E23=>1E22
  $1e,$25,  // 1E25=>1E24
  $1e,$27,  // 1E27=>1E26
  $1e,$29,  // 1E29=>1E28
  $1e,$2b,  // 1E2B=>1E2A
  $1e,$2d,  // 1E2D=>1E2C
  $1e,$2f,  // 1E2F=>1E2E
  $1e,$31,  // 1E31=>1E30
  $1e,$33,  // 1E33=>1E32
  $1e,$35,  // 1E35=>1E34
  $1e,$37,  // 1E37=>1E36
  $1e,$39,  // 1E39=>1E38
  $1e,$3b,  // 1E3B=>1E3A
  $1e,$3d,  // 1E3D=>1E3C
  $1e,$3f,  // 1E3F=>1E3E
  $1e,$41,  // 1E41=>1E40
  $1e,$43,  // 1E43=>1E42
  $1e,$45,  // 1E45=>1E44
  $1e,$47,  // 1E47=>1E46
  $1e,$49,  // 1E49=>1E48
  $1e,$4b,  // 1E4B=>1E4A
  $1e,$4d,  // 1E4D=>1E4C
  $1e,$4f,  // 1E4F=>1E4E
  $1e,$51,  // 1E51=>1E50
  $1e,$53,  // 1E53=>1E52
  $1e,$55,  // 1E55=>1E54
  $1e,$57,  // 1E57=>1E56
  $1e,$59,  // 1E59=>1E58
  $1e,$5b,  // 1E5B=>1E5A
  $1e,$5d,  // 1E5D=>1E5C
  $1e,$5f,  // 1E5F=>1E5E
  $1e,$61,  // 1E61=>1E60
  $1e,$63,  // 1E63=>1E62
  $1e,$65,  // 1E65=>1E64
  $1e,$67,  // 1E67=>1E66
  $1e,$69,  // 1E69=>1E68
  $1e,$6b,  // 1E6B=>1E6A
  $1e,$6d,  // 1E6D=>1E6C
  $1e,$6f,  // 1E6F=>1E6E
  $1e,$71,  // 1E71=>1E70
  $1e,$73,  // 1E73=>1E72
  $1e,$75,  // 1E75=>1E74
  $1e,$77,  // 1E77=>1E76
  $1e,$79,  // 1E79=>1E78
  $1e,$7b,  // 1E7B=>1E7A
  $1e,$7d,  // 1E7D=>1E7C
  $1e,$7f,  // 1E7F=>1E7E
  $1e,$81,  // 1E81=>1E80
  $1e,$83,  // 1E83=>1E82
  $1e,$85,  // 1E85=>1E84
  $1e,$87,  // 1E87=>1E86
  $1e,$89,  // 1E89=>1E88
  $1e,$8b,  // 1E8B=>1E8A
  $1e,$8d,  // 1E8D=>1E8C
  $1e,$8f,  // 1E8F=>1E8E
  $1e,$91,  // 1E91=>1E90
  $1e,$93,  // 1E93=>1E92
  $1e,$95,  // 1E95=>1E94
  $1e,$9b,  // 1E9B=>1E60
  $1e,$a1,  // 1EA1=>1EA0
  $1e,$a3,  // 1EA3=>1EA2
  $1e,$a5,  // 1EA5=>1EA4
  $1e,$a7,  // 1EA7=>1EA6
  $1e,$a9,  // 1EA9=>1EA8
  $1e,$ab,  // 1EAB=>1EAA
  $1e,$ad,  // 1EAD=>1EAC
  $1e,$af,  // 1EAF=>1EAE
  $1e,$b1,  // 1EB1=>1EB0
  $1e,$b3,  // 1EB3=>1EB2
  $1e,$b5,  // 1EB5=>1EB4
  $1e,$b7,  // 1EB7=>1EB6
  $1e,$b9,  // 1EB9=>1EB8
  $1e,$bb,  // 1EBB=>1EBA
  $1e,$bd,  // 1EBD=>1EBC
  $1e,$bf,  // 1EBF=>1EBE
  $1e,$c1,  // 1EC1=>1EC0
  $1e,$c3,  // 1EC3=>1EC2
  $1e,$c5,  // 1EC5=>1EC4
  $1e,$c7,  // 1EC7=>1EC6
  $1e,$c9,  // 1EC9=>1EC8
  $1e,$cb,  // 1ECB=>1ECA
  $1e,$cd,  // 1ECD=>1ECC
  $1e,$cf,  // 1ECF=>1ECE
  $1e,$d1,  // 1ED1=>1ED0
  $1e,$d3,  // 1ED3=>1ED2
  $1e,$d5,  // 1ED5=>1ED4
  $1e,$d7,  // 1ED7=>1ED6
  $1e,$d9,  // 1ED9=>1ED8
  $1e,$db,  // 1EDB=>1EDA
  $1e,$dd,  // 1EDD=>1EDC
  $1e,$df,  // 1EDF=>1EDE
  $1e,$e1,  // 1EE1=>1EE0
  $1e,$e3,  // 1EE3=>1EE2
  $1e,$e5,  // 1EE5=>1EE4
  $1e,$e7,  // 1EE7=>1EE6
  $1e,$e9,  // 1EE9=>1EE8
  $1e,$eb,  // 1EEB=>1EEA
  $1e,$ed,  // 1EED=>1EEC
  $1e,$ef,  // 1EEF=>1EEE
  $1e,$f1,  // 1EF1=>1EF0
  $1e,$f3,  // 1EF3=>1EF2
  $1e,$f5,  // 1EF5=>1EF4
  $1e,$f7,  // 1EF7=>1EF6
  $1e,$f9,  // 1EF9=>1EF8
  $1f,$00,  // 1F00=>1F08
  $1f,$01,  // 1F01=>1F09
  $1f,$02,  // 1F02=>1F0A
  $1f,$03,  // 1F03=>1F0B
  $1f,$04,  // 1F04=>1F0C
  $1f,$05,  // 1F05=>1F0D
  $1f,$06,  // 1F06=>1F0E
  $1f,$07,  // 1F07=>1F0F
  $1f,$10,  // 1F10=>1F18
  $1f,$11,  // 1F11=>1F19
  $1f,$12,  // 1F12=>1F1A
  $1f,$13,  // 1F13=>1F1B
  $1f,$14,  // 1F14=>1F1C
  $1f,$15,  // 1F15=>1F1D
  $1f,$20,  // 1F20=>1F28
  $1f,$21,  // 1F21=>1F29
  $1f,$22,  // 1F22=>1F2A
  $1f,$23,  // 1F23=>1F2B
  $1f,$24,  // 1F24=>1F2C
  $1f,$25,  // 1F25=>1F2D
  $1f,$26,  // 1F26=>1F2E
  $1f,$27,  // 1F27=>1F2F
  $1f,$30,  // 1F30=>1F38
  $1f,$31,  // 1F31=>1F39
  $1f,$32,  // 1F32=>1F3A
  $1f,$33,  // 1F33=>1F3B
  $1f,$34,  // 1F34=>1F3C
  $1f,$35,  // 1F35=>1F3D
  $1f,$36,  // 1F36=>1F3E
  $1f,$37,  // 1F37=>1F3F
  $1f,$40,  // 1F40=>1F48
  $1f,$41,  // 1F41=>1F49
  $1f,$42,  // 1F42=>1F4A
  $1f,$43,  // 1F43=>1F4B
  $1f,$44,  // 1F44=>1F4C
  $1f,$45,  // 1F45=>1F4D
  $1f,$51,  // 1F51=>1F59
  $1f,$53,  // 1F53=>1F5B
  $1f,$55,  // 1F55=>1F5D
  $1f,$57,  // 1F57=>1F5F
  $1f,$60,  // 1F60=>1F68
  $1f,$61,  // 1F61=>1F69
  $1f,$62,  // 1F62=>1F6A
  $1f,$63,  // 1F63=>1F6B
  $1f,$64,  // 1F64=>1F6C
  $1f,$65,  // 1F65=>1F6D
  $1f,$66,  // 1F66=>1F6E
  $1f,$67,  // 1F67=>1F6F
  $1f,$70,  // 1F70=>1FBA
  $1f,$71,  // 1F71=>1FBB
  $1f,$72,  // 1F72=>1FC8
  $1f,$73,  // 1F73=>1FC9
  $1f,$74,  // 1F74=>1FCA
  $1f,$75,  // 1F75=>1FCB
  $1f,$76,  // 1F76=>1FDA
  $1f,$77,  // 1F77=>1FDB
  $1f,$78,  // 1F78=>1FF8
  $1f,$79,  // 1F79=>1FF9
  $1f,$7a,  // 1F7A=>1FEA
  $1f,$7b,  // 1F7B=>1FEB
  $1f,$7c,  // 1F7C=>1FFA
  $1f,$7d,  // 1F7D=>1FFB
  $1f,$80,  // 1F80=>1F88
  $1f,$81,  // 1F81=>1F89
  $1f,$82,  // 1F82=>1F8A
  $1f,$83,  // 1F83=>1F8B
  $1f,$84,  // 1F84=>1F8C
  $1f,$85,  // 1F85=>1F8D
  $1f,$86,  // 1F86=>1F8E
  $1f,$87,  // 1F87=>1F8F
  $1f,$90,  // 1F90=>1F98
  $1f,$91,  // 1F91=>1F99
  $1f,$92,  // 1F92=>1F9A
  $1f,$93,  // 1F93=>1F9B
  $1f,$94,  // 1F94=>1F9C
  $1f,$95,  // 1F95=>1F9D
  $1f,$96,  // 1F96=>1F9E
  $1f,$97,  // 1F97=>1F9F
  $1f,$a0,  // 1FA0=>1FA8
  $1f,$a1,  // 1FA1=>1FA9
  $1f,$a2,  // 1FA2=>1FAA
  $1f,$a3,  // 1FA3=>1FAB
  $1f,$a4,  // 1FA4=>1FAC
  $1f,$a5,  // 1FA5=>1FAD
  $1f,$a6,  // 1FA6=>1FAE
  $1f,$a7,  // 1FA7=>1FAF
  $1f,$b0,  // 1FB0=>1FB8
  $1f,$b1,  // 1FB1=>1FB9
  $1f,$b3,  // 1FB3=>1FBC
  $1f,$be,  // 1FBE=>0399
  $1f,$c3,  // 1FC3=>1FCC
  $1f,$d0,  // 1FD0=>1FD8
  $1f,$d1,  // 1FD1=>1FD9
  $1f,$e0,  // 1FE0=>1FE8
  $1f,$e1,  // 1FE1=>1FE9
  $1f,$e5,  // 1FE5=>1FEC
  $1f,$f3,  // 1FF3=>1FFC
  $21,$70,  // 2170=>2160
  $21,$71,  // 2171=>2161
  $21,$72,  // 2172=>2162
  $21,$73,  // 2173=>2163
  $21,$74,  // 2174=>2164
  $21,$75,  // 2175=>2165
  $21,$76,  // 2176=>2166
  $21,$77,  // 2177=>2167
  $21,$78,  // 2178=>2168
  $21,$79,  // 2179=>2169
  $21,$7a,  // 217A=>216A
  $21,$7b,  // 217B=>216B
  $21,$7c,  // 217C=>216C
  $21,$7d,  // 217D=>216D
  $21,$7e,  // 217E=>216E
  $21,$7f,  // 217F=>216F
  $24,$d0,  // 24D0=>24B6
  $24,$d1,  // 24D1=>24B7
  $24,$d2,  // 24D2=>24B8
  $24,$d3,  // 24D3=>24B9
  $24,$d4,  // 24D4=>24BA
  $24,$d5,  // 24D5=>24BB
  $24,$d6,  // 24D6=>24BC
  $24,$d7,  // 24D7=>24BD
  $24,$d8,  // 24D8=>24BE
  $24,$d9,  // 24D9=>24BF
  $24,$da,  // 24DA=>24C0
  $24,$db,  // 24DB=>24C1
  $24,$dc,  // 24DC=>24C2
  $24,$dd,  // 24DD=>24C3
  $24,$de,  // 24DE=>24C4
  $24,$df,  // 24DF=>24C5
  $24,$e0,  // 24E0=>24C6
  $24,$e1,  // 24E1=>24C7
  $24,$e2,  // 24E2=>24C8
  $24,$e3,  // 24E3=>24C9
  $24,$e4,  // 24E4=>24CA
  $24,$e5,  // 24E5=>24CB
  $24,$e6,  // 24E6=>24CC
  $24,$e7,  // 24E7=>24CD
  $24,$e8,  // 24E8=>24CE
  $24,$e9,  // 24E9=>24CF
  $2c,$30,  // 2C30=>2C00
  $2c,$31,  // 2C31=>2C01
  $2c,$32,  // 2C32=>2C02
  $2c,$33,  // 2C33=>2C03
  $2c,$34,  // 2C34=>2C04
  $2c,$35,  // 2C35=>2C05
  $2c,$36,  // 2C36=>2C06
  $2c,$37,  // 2C37=>2C07
  $2c,$38,  // 2C38=>2C08
  $2c,$39,  // 2C39=>2C09
  $2c,$3a,  // 2C3A=>2C0A
  $2c,$3b,  // 2C3B=>2C0B
  $2c,$3c,  // 2C3C=>2C0C
  $2c,$3d,  // 2C3D=>2C0D
  $2c,$3e,  // 2C3E=>2C0E
  $2c,$3f,  // 2C3F=>2C0F
  $2c,$40,  // 2C40=>2C10
  $2c,$41,  // 2C41=>2C11
  $2c,$42,  // 2C42=>2C12
  $2c,$43,  // 2C43=>2C13
  $2c,$44,  // 2C44=>2C14
  $2c,$45,  // 2C45=>2C15
  $2c,$46,  // 2C46=>2C16
  $2c,$47,  // 2C47=>2C17
  $2c,$48,  // 2C48=>2C18
  $2c,$49,  // 2C49=>2C19
  $2c,$4a,  // 2C4A=>2C1A
  $2c,$4b,  // 2C4B=>2C1B
  $2c,$4c,  // 2C4C=>2C1C
  $2c,$4d,  // 2C4D=>2C1D
  $2c,$4e,  // 2C4E=>2C1E
  $2c,$4f,  // 2C4F=>2C1F
  $2c,$50,  // 2C50=>2C20
  $2c,$51,  // 2C51=>2C21
  $2c,$52,  // 2C52=>2C22
  $2c,$53,  // 2C53=>2C23
  $2c,$54,  // 2C54=>2C24
  $2c,$55,  // 2C55=>2C25
  $2c,$56,  // 2C56=>2C26
  $2c,$57,  // 2C57=>2C27
  $2c,$58,  // 2C58=>2C28
  $2c,$59,  // 2C59=>2C29
  $2c,$5a,  // 2C5A=>2C2A
  $2c,$5b,  // 2C5B=>2C2B
  $2c,$5c,  // 2C5C=>2C2C
  $2c,$5d,  // 2C5D=>2C2D
  $2c,$5e,  // 2C5E=>2C2E
  $2c,$81,  // 2C81=>2C80
  $2c,$83,  // 2C83=>2C82
  $2c,$85,  // 2C85=>2C84
  $2c,$87,  // 2C87=>2C86
  $2c,$89,  // 2C89=>2C88
  $2c,$8b,  // 2C8B=>2C8A
  $2c,$8d,  // 2C8D=>2C8C
  $2c,$8f,  // 2C8F=>2C8E
  $2c,$91,  // 2C91=>2C90
  $2c,$93,  // 2C93=>2C92
  $2c,$95,  // 2C95=>2C94
  $2c,$97,  // 2C97=>2C96
  $2c,$99,  // 2C99=>2C98
  $2c,$9b,  // 2C9B=>2C9A
  $2c,$9d,  // 2C9D=>2C9C
  $2c,$9f,  // 2C9F=>2C9E
  $2c,$a1,  // 2CA1=>2CA0
  $2c,$a3,  // 2CA3=>2CA2
  $2c,$a5,  // 2CA5=>2CA4
  $2c,$a7,  // 2CA7=>2CA6
  $2c,$a9,  // 2CA9=>2CA8
  $2c,$ab,  // 2CAB=>2CAA
  $2c,$ad,  // 2CAD=>2CAC
  $2c,$af,  // 2CAF=>2CAE
  $2c,$b1,  // 2CB1=>2CB0
  $2c,$b3,  // 2CB3=>2CB2
  $2c,$b5,  // 2CB5=>2CB4
  $2c,$b7,  // 2CB7=>2CB6
  $2c,$b9,  // 2CB9=>2CB8
  $2c,$bb,  // 2CBB=>2CBA
  $2c,$bd,  // 2CBD=>2CBC
  $2c,$bf,  // 2CBF=>2CBE
  $2c,$c1,  // 2CC1=>2CC0
  $2c,$c3,  // 2CC3=>2CC2
  $2c,$c5,  // 2CC5=>2CC4
  $2c,$c7,  // 2CC7=>2CC6
  $2c,$c9,  // 2CC9=>2CC8
  $2c,$cb,  // 2CCB=>2CCA
  $2c,$cd,  // 2CCD=>2CCC
  $2c,$cf,  // 2CCF=>2CCE
  $2c,$d1,  // 2CD1=>2CD0
  $2c,$d3,  // 2CD3=>2CD2
  $2c,$d5,  // 2CD5=>2CD4
  $2c,$d7,  // 2CD7=>2CD6
  $2c,$d9,  // 2CD9=>2CD8
  $2c,$db,  // 2CDB=>2CDA
  $2c,$dd,  // 2CDD=>2CDC
  $2c,$df,  // 2CDF=>2CDE
  $2c,$e1,  // 2CE1=>2CE0
  $2c,$e3,  // 2CE3=>2CE2
  $2d,$00,  // 2D00=>10A0
  $2d,$01,  // 2D01=>10A1
  $2d,$02,  // 2D02=>10A2
  $2d,$03,  // 2D03=>10A3
  $2d,$04,  // 2D04=>10A4
  $2d,$05,  // 2D05=>10A5
  $2d,$06,  // 2D06=>10A6
  $2d,$07,  // 2D07=>10A7
  $2d,$08,  // 2D08=>10A8
  $2d,$09,  // 2D09=>10A9
  $2d,$0a,  // 2D0A=>10AA
  $2d,$0b,  // 2D0B=>10AB
  $2d,$0c,  // 2D0C=>10AC
  $2d,$0d,  // 2D0D=>10AD
  $2d,$0e,  // 2D0E=>10AE
  $2d,$0f,  // 2D0F=>10AF
  $2d,$10,  // 2D10=>10B0
  $2d,$11,  // 2D11=>10B1
  $2d,$12,  // 2D12=>10B2
  $2d,$13,  // 2D13=>10B3
  $2d,$14,  // 2D14=>10B4
  $2d,$15,  // 2D15=>10B5
  $2d,$16,  // 2D16=>10B6
  $2d,$17,  // 2D17=>10B7
  $2d,$18,  // 2D18=>10B8
  $2d,$19,  // 2D19=>10B9
  $2d,$1a,  // 2D1A=>10BA
  $2d,$1b,  // 2D1B=>10BB
  $2d,$1c,  // 2D1C=>10BC
  $2d,$1d,  // 2D1D=>10BD
  $2d,$1e,  // 2D1E=>10BE
  $2d,$1f,  // 2D1F=>10BF
  $2d,$20,  // 2D20=>10C0
  $2d,$21,  // 2D21=>10C1
  $2d,$22,  // 2D22=>10C2
  $2d,$23,  // 2D23=>10C3
  $2d,$24,  // 2D24=>10C4
  $2d,$25,  // 2D25=>10C5
  $ff,$41,  // FF41=>FF21
  $ff,$42,  // FF42=>FF22
  $ff,$43,  // FF43=>FF23
  $ff,$44,  // FF44=>FF24
  $ff,$45,  // FF45=>FF25
  $ff,$46,  // FF46=>FF26
  $ff,$47,  // FF47=>FF27
  $ff,$48,  // FF48=>FF28
  $ff,$49,  // FF49=>FF29
  $ff,$4a,  // FF4A=>FF2A
  $ff,$4b,  // FF4B=>FF2B
  $ff,$4c,  // FF4C=>FF2C
  $ff,$4d,  // FF4D=>FF2D
  $ff,$4e,  // FF4E=>FF2E
  $ff,$4f,  // FF4F=>FF2F
  $ff,$50,  // FF50=>FF30
  $ff,$51,  // FF51=>FF31
  $ff,$52,  // FF52=>FF32
  $ff,$53,  // FF53=>FF33
  $ff,$54,  // FF54=>FF34
  $ff,$55,  // FF55=>FF35
  $ff,$56,  // FF56=>FF36
  $ff,$57,  // FF57=>FF37
  $ff,$58,  // FF58=>FF38
  $ff,$59,  // FF59=>FF39
  $ff,$5a   // FF5A=>FF3A
}

// Upper Case Result
VOLATILE CHAR cWCUpperResult[] =
{
  $00,$41,  // 0061=>0041
  $00,$42,  // 0062=>0042
  $00,$43,  // 0063=>0043
  $00,$44,  // 0064=>0044
  $00,$45,  // 0065=>0045
  $00,$46,  // 0066=>0046
  $00,$47,  // 0067=>0047
  $00,$48,  // 0068=>0048
  $00,$49,  // 0069=>0049
  $00,$4a,  // 006A=>004A
  $00,$4b,  // 006B=>004B
  $00,$4c,  // 006C=>004C
  $00,$4d,  // 006D=>004D
  $00,$4e,  // 006E=>004E
  $00,$4f,  // 006F=>004F
  $00,$50,  // 0070=>0050
  $00,$51,  // 0071=>0051
  $00,$52,  // 0072=>0052
  $00,$53,  // 0073=>0053
  $00,$54,  // 0074=>0054
  $00,$55,  // 0075=>0055
  $00,$56,  // 0076=>0056
  $00,$57,  // 0077=>0057
  $00,$58,  // 0078=>0058
  $00,$59,  // 0079=>0059
  $00,$5a,  // 007A=>005A
  $03,$9c,  // 00B5=>039C
  $00,$c0,  // 00E0=>00C0
  $00,$c1,  // 00E1=>00C1
  $00,$c2,  // 00E2=>00C2
  $00,$c3,  // 00E3=>00C3
  $00,$c4,  // 00E4=>00C4
  $00,$c5,  // 00E5=>00C5
  $00,$c6,  // 00E6=>00C6
  $00,$c7,  // 00E7=>00C7
  $00,$c8,  // 00E8=>00C8
  $00,$c9,  // 00E9=>00C9
  $00,$ca,  // 00EA=>00CA
  $00,$cb,  // 00EB=>00CB
  $00,$cc,  // 00EC=>00CC
  $00,$cd,  // 00ED=>00CD
  $00,$ce,  // 00EE=>00CE
  $00,$cf,  // 00EF=>00CF
  $00,$d0,  // 00F0=>00D0
  $00,$d1,  // 00F1=>00D1
  $00,$d2,  // 00F2=>00D2
  $00,$d3,  // 00F3=>00D3
  $00,$d4,  // 00F4=>00D4
  $00,$d5,  // 00F5=>00D5
  $00,$d6,  // 00F6=>00D6
  $00,$d8,  // 00F8=>00D8
  $00,$d9,  // 00F9=>00D9
  $00,$da,  // 00FA=>00DA
  $00,$db,  // 00FB=>00DB
  $00,$dc,  // 00FC=>00DC
  $00,$dd,  // 00FD=>00DD
  $00,$de,  // 00FE=>00DE
  $01,$78,  // 00FF=>0178
  $01,$00,  // 0101=>0100
  $01,$02,  // 0103=>0102
  $01,$04,  // 0105=>0104
  $01,$06,  // 0107=>0106
  $01,$08,  // 0109=>0108
  $01,$0a,  // 010B=>010A
  $01,$0c,  // 010D=>010C
  $01,$0e,  // 010F=>010E
  $01,$10,  // 0111=>0110
  $01,$12,  // 0113=>0112
  $01,$14,  // 0115=>0114
  $01,$16,  // 0117=>0116
  $01,$18,  // 0119=>0118
  $01,$1a,  // 011B=>011A
  $01,$1c,  // 011D=>011C
  $01,$1e,  // 011F=>011E
  $01,$20,  // 0121=>0120
  $01,$22,  // 0123=>0122
  $01,$24,  // 0125=>0124
  $01,$26,  // 0127=>0126
  $01,$28,  // 0129=>0128
  $01,$2a,  // 012B=>012A
  $01,$2c,  // 012D=>012C
  $01,$2e,  // 012F=>012E
  $00,$49,  // 0131=>0049
  $01,$32,  // 0133=>0132
  $01,$34,  // 0135=>0134
  $01,$36,  // 0137=>0136
  $01,$39,  // 013A=>0139
  $01,$3b,  // 013C=>013B
  $01,$3d,  // 013E=>013D
  $01,$3f,  // 0140=>013F
  $01,$41,  // 0142=>0141
  $01,$43,  // 0144=>0143
  $01,$45,  // 0146=>0145
  $01,$47,  // 0148=>0147
  $01,$4a,  // 014B=>014A
  $01,$4c,  // 014D=>014C
  $01,$4e,  // 014F=>014E
  $01,$50,  // 0151=>0150
  $01,$52,  // 0153=>0152
  $01,$54,  // 0155=>0154
  $01,$56,  // 0157=>0156
  $01,$58,  // 0159=>0158
  $01,$5a,  // 015B=>015A
  $01,$5c,  // 015D=>015C
  $01,$5e,  // 015F=>015E
  $01,$60,  // 0161=>0160
  $01,$62,  // 0163=>0162
  $01,$64,  // 0165=>0164
  $01,$66,  // 0167=>0166
  $01,$68,  // 0169=>0168
  $01,$6a,  // 016B=>016A
  $01,$6c,  // 016D=>016C
  $01,$6e,  // 016F=>016E
  $01,$70,  // 0171=>0170
  $01,$72,  // 0173=>0172
  $01,$74,  // 0175=>0174
  $01,$76,  // 0177=>0176
  $01,$79,  // 017A=>0179
  $01,$7b,  // 017C=>017B
  $01,$7d,  // 017E=>017D
  $00,$53,  // 017F=>0053
  $01,$82,  // 0183=>0182
  $01,$84,  // 0185=>0184
  $01,$87,  // 0188=>0187
  $01,$8b,  // 018C=>018B
  $01,$91,  // 0192=>0191
  $01,$f6,  // 0195=>01F6
  $01,$98,  // 0199=>0198
  $02,$3d,  // 019A=>023D
  $02,$20,  // 019E=>0220
  $01,$a0,  // 01A1=>01A0
  $01,$a2,  // 01A3=>01A2
  $01,$a4,  // 01A5=>01A4
  $01,$a7,  // 01A8=>01A7
  $01,$ac,  // 01AD=>01AC
  $01,$af,  // 01B0=>01AF
  $01,$b3,  // 01B4=>01B3
  $01,$b5,  // 01B6=>01B5
  $01,$b8,  // 01B9=>01B8
  $01,$bc,  // 01BD=>01BC
  $01,$f7,  // 01BF=>01F7
  $01,$c4,  // 01C5=>01C4
  $01,$c4,  // 01C6=>01C4
  $01,$c7,  // 01C8=>01C7
  $01,$c7,  // 01C9=>01C7
  $01,$ca,  // 01CB=>01CA
  $01,$ca,  // 01CC=>01CA
  $01,$cd,  // 01CE=>01CD
  $01,$cf,  // 01D0=>01CF
  $01,$d1,  // 01D2=>01D1
  $01,$d3,  // 01D4=>01D3
  $01,$d5,  // 01D6=>01D5
  $01,$d7,  // 01D8=>01D7
  $01,$d9,  // 01DA=>01D9
  $01,$db,  // 01DC=>01DB
  $01,$8e,  // 01DD=>018E
  $01,$de,  // 01DF=>01DE
  $01,$e0,  // 01E1=>01E0
  $01,$e2,  // 01E3=>01E2
  $01,$e4,  // 01E5=>01E4
  $01,$e6,  // 01E7=>01E6
  $01,$e8,  // 01E9=>01E8
  $01,$ea,  // 01EB=>01EA
  $01,$ec,  // 01ED=>01EC
  $01,$ee,  // 01EF=>01EE
  $01,$f1,  // 01F2=>01F1
  $01,$f1,  // 01F3=>01F1
  $01,$f4,  // 01F5=>01F4
  $01,$f8,  // 01F9=>01F8
  $01,$fa,  // 01FB=>01FA
  $01,$fc,  // 01FD=>01FC
  $01,$fe,  // 01FF=>01FE
  $02,$00,  // 0201=>0200
  $02,$02,  // 0203=>0202
  $02,$04,  // 0205=>0204
  $02,$06,  // 0207=>0206
  $02,$08,  // 0209=>0208
  $02,$0a,  // 020B=>020A
  $02,$0c,  // 020D=>020C
  $02,$0e,  // 020F=>020E
  $02,$10,  // 0211=>0210
  $02,$12,  // 0213=>0212
  $02,$14,  // 0215=>0214
  $02,$16,  // 0217=>0216
  $02,$18,  // 0219=>0218
  $02,$1a,  // 021B=>021A
  $02,$1c,  // 021D=>021C
  $02,$1e,  // 021F=>021E
  $02,$22,  // 0223=>0222
  $02,$24,  // 0225=>0224
  $02,$26,  // 0227=>0226
  $02,$28,  // 0229=>0228
  $02,$2a,  // 022B=>022A
  $02,$2c,  // 022D=>022C
  $02,$2e,  // 022F=>022E
  $02,$30,  // 0231=>0230
  $02,$32,  // 0233=>0232
  $02,$3b,  // 023C=>023B
  $01,$81,  // 0253=>0181
  $01,$86,  // 0254=>0186
  $01,$89,  // 0256=>0189
  $01,$8a,  // 0257=>018A
  $01,$8f,  // 0259=>018F
  $01,$90,  // 025B=>0190
  $01,$93,  // 0260=>0193
  $01,$94,  // 0263=>0194
  $01,$97,  // 0268=>0197
  $01,$96,  // 0269=>0196
  $01,$9c,  // 026F=>019C
  $01,$9d,  // 0272=>019D
  $01,$9f,  // 0275=>019F
  $01,$a6,  // 0280=>01A6
  $01,$a9,  // 0283=>01A9
  $01,$ae,  // 0288=>01AE
  $01,$b1,  // 028A=>01B1
  $01,$b2,  // 028B=>01B2
  $01,$b7,  // 0292=>01B7
  $02,$41,  // 0294=>0241
  $03,$99,  // 0345=>0399
  $03,$86,  // 03AC=>0386
  $03,$88,  // 03AD=>0388
  $03,$89,  // 03AE=>0389
  $03,$8a,  // 03AF=>038A
  $03,$91,  // 03B1=>0391
  $03,$92,  // 03B2=>0392
  $03,$93,  // 03B3=>0393
  $03,$94,  // 03B4=>0394
  $03,$95,  // 03B5=>0395
  $03,$96,  // 03B6=>0396
  $03,$97,  // 03B7=>0397
  $03,$98,  // 03B8=>0398
  $03,$99,  // 03B9=>0399
  $03,$9a,  // 03BA=>039A
  $03,$9b,  // 03BB=>039B
  $03,$9c,  // 03BC=>039C
  $03,$9d,  // 03BD=>039D
  $03,$9e,  // 03BE=>039E
  $03,$9f,  // 03BF=>039F
  $03,$a0,  // 03C0=>03A0
  $03,$a1,  // 03C1=>03A1
  $03,$a3,  // 03C2=>03A3
  $03,$a3,  // 03C3=>03A3
  $03,$a4,  // 03C4=>03A4
  $03,$a5,  // 03C5=>03A5
  $03,$a6,  // 03C6=>03A6
  $03,$a7,  // 03C7=>03A7
  $03,$a8,  // 03C8=>03A8
  $03,$a9,  // 03C9=>03A9
  $03,$aa,  // 03CA=>03AA
  $03,$ab,  // 03CB=>03AB
  $03,$8c,  // 03CC=>038C
  $03,$8e,  // 03CD=>038E
  $03,$8f,  // 03CE=>038F
  $03,$92,  // 03D0=>0392
  $03,$98,  // 03D1=>0398
  $03,$a6,  // 03D5=>03A6
  $03,$a0,  // 03D6=>03A0
  $03,$d8,  // 03D9=>03D8
  $03,$da,  // 03DB=>03DA
  $03,$dc,  // 03DD=>03DC
  $03,$de,  // 03DF=>03DE
  $03,$e0,  // 03E1=>03E0
  $03,$e2,  // 03E3=>03E2
  $03,$e4,  // 03E5=>03E4
  $03,$e6,  // 03E7=>03E6
  $03,$e8,  // 03E9=>03E8
  $03,$ea,  // 03EB=>03EA
  $03,$ec,  // 03ED=>03EC
  $03,$ee,  // 03EF=>03EE
  $03,$9a,  // 03F0=>039A
  $03,$a1,  // 03F1=>03A1
  $03,$f9,  // 03F2=>03F9
  $03,$95,  // 03F5=>0395
  $03,$f7,  // 03F8=>03F7
  $03,$fa,  // 03FB=>03FA
  $04,$10,  // 0430=>0410
  $04,$11,  // 0431=>0411
  $04,$12,  // 0432=>0412
  $04,$13,  // 0433=>0413
  $04,$14,  // 0434=>0414
  $04,$15,  // 0435=>0415
  $04,$16,  // 0436=>0416
  $04,$17,  // 0437=>0417
  $04,$18,  // 0438=>0418
  $04,$19,  // 0439=>0419
  $04,$1a,  // 043A=>041A
  $04,$1b,  // 043B=>041B
  $04,$1c,  // 043C=>041C
  $04,$1d,  // 043D=>041D
  $04,$1e,  // 043E=>041E
  $04,$1f,  // 043F=>041F
  $04,$20,  // 0440=>0420
  $04,$21,  // 0441=>0421
  $04,$22,  // 0442=>0422
  $04,$23,  // 0443=>0423
  $04,$24,  // 0444=>0424
  $04,$25,  // 0445=>0425
  $04,$26,  // 0446=>0426
  $04,$27,  // 0447=>0427
  $04,$28,  // 0448=>0428
  $04,$29,  // 0449=>0429
  $04,$2a,  // 044A=>042A
  $04,$2b,  // 044B=>042B
  $04,$2c,  // 044C=>042C
  $04,$2d,  // 044D=>042D
  $04,$2e,  // 044E=>042E
  $04,$2f,  // 044F=>042F
  $04,$00,  // 0450=>0400
  $04,$01,  // 0451=>0401
  $04,$02,  // 0452=>0402
  $04,$03,  // 0453=>0403
  $04,$04,  // 0454=>0404
  $04,$05,  // 0455=>0405
  $04,$06,  // 0456=>0406
  $04,$07,  // 0457=>0407
  $04,$08,  // 0458=>0408
  $04,$09,  // 0459=>0409
  $04,$0a,  // 045A=>040A
  $04,$0b,  // 045B=>040B
  $04,$0c,  // 045C=>040C
  $04,$0d,  // 045D=>040D
  $04,$0e,  // 045E=>040E
  $04,$0f,  // 045F=>040F
  $04,$60,  // 0461=>0460
  $04,$62,  // 0463=>0462
  $04,$64,  // 0465=>0464
  $04,$66,  // 0467=>0466
  $04,$68,  // 0469=>0468
  $04,$6a,  // 046B=>046A
  $04,$6c,  // 046D=>046C
  $04,$6e,  // 046F=>046E
  $04,$70,  // 0471=>0470
  $04,$72,  // 0473=>0472
  $04,$74,  // 0475=>0474
  $04,$76,  // 0477=>0476
  $04,$78,  // 0479=>0478
  $04,$7a,  // 047B=>047A
  $04,$7c,  // 047D=>047C
  $04,$7e,  // 047F=>047E
  $04,$80,  // 0481=>0480
  $04,$8a,  // 048B=>048A
  $04,$8c,  // 048D=>048C
  $04,$8e,  // 048F=>048E
  $04,$90,  // 0491=>0490
  $04,$92,  // 0493=>0492
  $04,$94,  // 0495=>0494
  $04,$96,  // 0497=>0496
  $04,$98,  // 0499=>0498
  $04,$9a,  // 049B=>049A
  $04,$9c,  // 049D=>049C
  $04,$9e,  // 049F=>049E
  $04,$a0,  // 04A1=>04A0
  $04,$a2,  // 04A3=>04A2
  $04,$a4,  // 04A5=>04A4
  $04,$a6,  // 04A7=>04A6
  $04,$a8,  // 04A9=>04A8
  $04,$aa,  // 04AB=>04AA
  $04,$ac,  // 04AD=>04AC
  $04,$ae,  // 04AF=>04AE
  $04,$b0,  // 04B1=>04B0
  $04,$b2,  // 04B3=>04B2
  $04,$b4,  // 04B5=>04B4
  $04,$b6,  // 04B7=>04B6
  $04,$b8,  // 04B9=>04B8
  $04,$ba,  // 04BB=>04BA
  $04,$bc,  // 04BD=>04BC
  $04,$be,  // 04BF=>04BE
  $04,$c1,  // 04C2=>04C1
  $04,$c3,  // 04C4=>04C3
  $04,$c5,  // 04C6=>04C5
  $04,$c7,  // 04C8=>04C7
  $04,$c9,  // 04CA=>04C9
  $04,$cb,  // 04CC=>04CB
  $04,$cd,  // 04CE=>04CD
  $04,$d0,  // 04D1=>04D0
  $04,$d2,  // 04D3=>04D2
  $04,$d4,  // 04D5=>04D4
  $04,$d6,  // 04D7=>04D6
  $04,$d8,  // 04D9=>04D8
  $04,$da,  // 04DB=>04DA
  $04,$dc,  // 04DD=>04DC
  $04,$de,  // 04DF=>04DE
  $04,$e0,  // 04E1=>04E0
  $04,$e2,  // 04E3=>04E2
  $04,$e4,  // 04E5=>04E4
  $04,$e6,  // 04E7=>04E6
  $04,$e8,  // 04E9=>04E8
  $04,$ea,  // 04EB=>04EA
  $04,$ec,  // 04ED=>04EC
  $04,$ee,  // 04EF=>04EE
  $04,$f0,  // 04F1=>04F0
  $04,$f2,  // 04F3=>04F2
  $04,$f4,  // 04F5=>04F4
  $04,$f6,  // 04F7=>04F6
  $04,$f8,  // 04F9=>04F8
  $05,$00,  // 0501=>0500
  $05,$02,  // 0503=>0502
  $05,$04,  // 0505=>0504
  $05,$06,  // 0507=>0506
  $05,$08,  // 0509=>0508
  $05,$0a,  // 050B=>050A
  $05,$0c,  // 050D=>050C
  $05,$0e,  // 050F=>050E
  $05,$31,  // 0561=>0531
  $05,$32,  // 0562=>0532
  $05,$33,  // 0563=>0533
  $05,$34,  // 0564=>0534
  $05,$35,  // 0565=>0535
  $05,$36,  // 0566=>0536
  $05,$37,  // 0567=>0537
  $05,$38,  // 0568=>0538
  $05,$39,  // 0569=>0539
  $05,$3a,  // 056A=>053A
  $05,$3b,  // 056B=>053B
  $05,$3c,  // 056C=>053C
  $05,$3d,  // 056D=>053D
  $05,$3e,  // 056E=>053E
  $05,$3f,  // 056F=>053F
  $05,$40,  // 0570=>0540
  $05,$41,  // 0571=>0541
  $05,$42,  // 0572=>0542
  $05,$43,  // 0573=>0543
  $05,$44,  // 0574=>0544
  $05,$45,  // 0575=>0545
  $05,$46,  // 0576=>0546
  $05,$47,  // 0577=>0547
  $05,$48,  // 0578=>0548
  $05,$49,  // 0579=>0549
  $05,$4a,  // 057A=>054A
  $05,$4b,  // 057B=>054B
  $05,$4c,  // 057C=>054C
  $05,$4d,  // 057D=>054D
  $05,$4e,  // 057E=>054E
  $05,$4f,  // 057F=>054F
  $05,$50,  // 0580=>0550
  $05,$51,  // 0581=>0551
  $05,$52,  // 0582=>0552
  $05,$53,  // 0583=>0553
  $05,$54,  // 0584=>0554
  $05,$55,  // 0585=>0555
  $05,$56,  // 0586=>0556
  $1e,$00,  // 1E01=>1E00
  $1e,$02,  // 1E03=>1E02
  $1e,$04,  // 1E05=>1E04
  $1e,$06,  // 1E07=>1E06
  $1e,$08,  // 1E09=>1E08
  $1e,$0a,  // 1E0B=>1E0A
  $1e,$0c,  // 1E0D=>1E0C
  $1e,$0e,  // 1E0F=>1E0E
  $1e,$10,  // 1E11=>1E10
  $1e,$12,  // 1E13=>1E12
  $1e,$14,  // 1E15=>1E14
  $1e,$16,  // 1E17=>1E16
  $1e,$18,  // 1E19=>1E18
  $1e,$1a,  // 1E1B=>1E1A
  $1e,$1c,  // 1E1D=>1E1C
  $1e,$1e,  // 1E1F=>1E1E
  $1e,$20,  // 1E21=>1E20
  $1e,$22,  // 1E23=>1E22
  $1e,$24,  // 1E25=>1E24
  $1e,$26,  // 1E27=>1E26
  $1e,$28,  // 1E29=>1E28
  $1e,$2a,  // 1E2B=>1E2A
  $1e,$2c,  // 1E2D=>1E2C
  $1e,$2e,  // 1E2F=>1E2E
  $1e,$30,  // 1E31=>1E30
  $1e,$32,  // 1E33=>1E32
  $1e,$34,  // 1E35=>1E34
  $1e,$36,  // 1E37=>1E36
  $1e,$38,  // 1E39=>1E38
  $1e,$3a,  // 1E3B=>1E3A
  $1e,$3c,  // 1E3D=>1E3C
  $1e,$3e,  // 1E3F=>1E3E
  $1e,$40,  // 1E41=>1E40
  $1e,$42,  // 1E43=>1E42
  $1e,$44,  // 1E45=>1E44
  $1e,$46,  // 1E47=>1E46
  $1e,$48,  // 1E49=>1E48
  $1e,$4a,  // 1E4B=>1E4A
  $1e,$4c,  // 1E4D=>1E4C
  $1e,$4e,  // 1E4F=>1E4E
  $1e,$50,  // 1E51=>1E50
  $1e,$52,  // 1E53=>1E52
  $1e,$54,  // 1E55=>1E54
  $1e,$56,  // 1E57=>1E56
  $1e,$58,  // 1E59=>1E58
  $1e,$5a,  // 1E5B=>1E5A
  $1e,$5c,  // 1E5D=>1E5C
  $1e,$5e,  // 1E5F=>1E5E
  $1e,$60,  // 1E61=>1E60
  $1e,$62,  // 1E63=>1E62
  $1e,$64,  // 1E65=>1E64
  $1e,$66,  // 1E67=>1E66
  $1e,$68,  // 1E69=>1E68
  $1e,$6a,  // 1E6B=>1E6A
  $1e,$6c,  // 1E6D=>1E6C
  $1e,$6e,  // 1E6F=>1E6E
  $1e,$70,  // 1E71=>1E70
  $1e,$72,  // 1E73=>1E72
  $1e,$74,  // 1E75=>1E74
  $1e,$76,  // 1E77=>1E76
  $1e,$78,  // 1E79=>1E78
  $1e,$7a,  // 1E7B=>1E7A
  $1e,$7c,  // 1E7D=>1E7C
  $1e,$7e,  // 1E7F=>1E7E
  $1e,$80,  // 1E81=>1E80
  $1e,$82,  // 1E83=>1E82
  $1e,$84,  // 1E85=>1E84
  $1e,$86,  // 1E87=>1E86
  $1e,$88,  // 1E89=>1E88
  $1e,$8a,  // 1E8B=>1E8A
  $1e,$8c,  // 1E8D=>1E8C
  $1e,$8e,  // 1E8F=>1E8E
  $1e,$90,  // 1E91=>1E90
  $1e,$92,  // 1E93=>1E92
  $1e,$94,  // 1E95=>1E94
  $1e,$60,  // 1E9B=>1E60
  $1e,$a0,  // 1EA1=>1EA0
  $1e,$a2,  // 1EA3=>1EA2
  $1e,$a4,  // 1EA5=>1EA4
  $1e,$a6,  // 1EA7=>1EA6
  $1e,$a8,  // 1EA9=>1EA8
  $1e,$aa,  // 1EAB=>1EAA
  $1e,$ac,  // 1EAD=>1EAC
  $1e,$ae,  // 1EAF=>1EAE
  $1e,$b0,  // 1EB1=>1EB0
  $1e,$b2,  // 1EB3=>1EB2
  $1e,$b4,  // 1EB5=>1EB4
  $1e,$b6,  // 1EB7=>1EB6
  $1e,$b8,  // 1EB9=>1EB8
  $1e,$ba,  // 1EBB=>1EBA
  $1e,$bc,  // 1EBD=>1EBC
  $1e,$be,  // 1EBF=>1EBE
  $1e,$c0,  // 1EC1=>1EC0
  $1e,$c2,  // 1EC3=>1EC2
  $1e,$c4,  // 1EC5=>1EC4
  $1e,$c6,  // 1EC7=>1EC6
  $1e,$c8,  // 1EC9=>1EC8
  $1e,$ca,  // 1ECB=>1ECA
  $1e,$cc,  // 1ECD=>1ECC
  $1e,$ce,  // 1ECF=>1ECE
  $1e,$d0,  // 1ED1=>1ED0
  $1e,$d2,  // 1ED3=>1ED2
  $1e,$d4,  // 1ED5=>1ED4
  $1e,$d6,  // 1ED7=>1ED6
  $1e,$d8,  // 1ED9=>1ED8
  $1e,$da,  // 1EDB=>1EDA
  $1e,$dc,  // 1EDD=>1EDC
  $1e,$de,  // 1EDF=>1EDE
  $1e,$e0,  // 1EE1=>1EE0
  $1e,$e2,  // 1EE3=>1EE2
  $1e,$e4,  // 1EE5=>1EE4
  $1e,$e6,  // 1EE7=>1EE6
  $1e,$e8,  // 1EE9=>1EE8
  $1e,$ea,  // 1EEB=>1EEA
  $1e,$ec,  // 1EED=>1EEC
  $1e,$ee,  // 1EEF=>1EEE
  $1e,$f0,  // 1EF1=>1EF0
  $1e,$f2,  // 1EF3=>1EF2
  $1e,$f4,  // 1EF5=>1EF4
  $1e,$f6,  // 1EF7=>1EF6
  $1e,$f8,  // 1EF9=>1EF8
  $1f,$08,  // 1F00=>1F08
  $1f,$09,  // 1F01=>1F09
  $1f,$0a,  // 1F02=>1F0A
  $1f,$0b,  // 1F03=>1F0B
  $1f,$0c,  // 1F04=>1F0C
  $1f,$0d,  // 1F05=>1F0D
  $1f,$0e,  // 1F06=>1F0E
  $1f,$0f,  // 1F07=>1F0F
  $1f,$18,  // 1F10=>1F18
  $1f,$19,  // 1F11=>1F19
  $1f,$1a,  // 1F12=>1F1A
  $1f,$1b,  // 1F13=>1F1B
  $1f,$1c,  // 1F14=>1F1C
  $1f,$1d,  // 1F15=>1F1D
  $1f,$28,  // 1F20=>1F28
  $1f,$29,  // 1F21=>1F29
  $1f,$2a,  // 1F22=>1F2A
  $1f,$2b,  // 1F23=>1F2B
  $1f,$2c,  // 1F24=>1F2C
  $1f,$2d,  // 1F25=>1F2D
  $1f,$2e,  // 1F26=>1F2E
  $1f,$2f,  // 1F27=>1F2F
  $1f,$38,  // 1F30=>1F38
  $1f,$39,  // 1F31=>1F39
  $1f,$3a,  // 1F32=>1F3A
  $1f,$3b,  // 1F33=>1F3B
  $1f,$3c,  // 1F34=>1F3C
  $1f,$3d,  // 1F35=>1F3D
  $1f,$3e,  // 1F36=>1F3E
  $1f,$3f,  // 1F37=>1F3F
  $1f,$48,  // 1F40=>1F48
  $1f,$49,  // 1F41=>1F49
  $1f,$4a,  // 1F42=>1F4A
  $1f,$4b,  // 1F43=>1F4B
  $1f,$4c,  // 1F44=>1F4C
  $1f,$4d,  // 1F45=>1F4D
  $1f,$59,  // 1F51=>1F59
  $1f,$5b,  // 1F53=>1F5B
  $1f,$5d,  // 1F55=>1F5D
  $1f,$5f,  // 1F57=>1F5F
  $1f,$68,  // 1F60=>1F68
  $1f,$69,  // 1F61=>1F69
  $1f,$6a,  // 1F62=>1F6A
  $1f,$6b,  // 1F63=>1F6B
  $1f,$6c,  // 1F64=>1F6C
  $1f,$6d,  // 1F65=>1F6D
  $1f,$6e,  // 1F66=>1F6E
  $1f,$6f,  // 1F67=>1F6F
  $1f,$ba,  // 1F70=>1FBA
  $1f,$bb,  // 1F71=>1FBB
  $1f,$c8,  // 1F72=>1FC8
  $1f,$c9,  // 1F73=>1FC9
  $1f,$ca,  // 1F74=>1FCA
  $1f,$cb,  // 1F75=>1FCB
  $1f,$da,  // 1F76=>1FDA
  $1f,$db,  // 1F77=>1FDB
  $1f,$f8,  // 1F78=>1FF8
  $1f,$f9,  // 1F79=>1FF9
  $1f,$ea,  // 1F7A=>1FEA
  $1f,$eb,  // 1F7B=>1FEB
  $1f,$fa,  // 1F7C=>1FFA
  $1f,$fb,  // 1F7D=>1FFB
  $1f,$88,  // 1F80=>1F88
  $1f,$89,  // 1F81=>1F89
  $1f,$8a,  // 1F82=>1F8A
  $1f,$8b,  // 1F83=>1F8B
  $1f,$8c,  // 1F84=>1F8C
  $1f,$8d,  // 1F85=>1F8D
  $1f,$8e,  // 1F86=>1F8E
  $1f,$8f,  // 1F87=>1F8F
  $1f,$98,  // 1F90=>1F98
  $1f,$99,  // 1F91=>1F99
  $1f,$9a,  // 1F92=>1F9A
  $1f,$9b,  // 1F93=>1F9B
  $1f,$9c,  // 1F94=>1F9C
  $1f,$9d,  // 1F95=>1F9D
  $1f,$9e,  // 1F96=>1F9E
  $1f,$9f,  // 1F97=>1F9F
  $1f,$a8,  // 1FA0=>1FA8
  $1f,$a9,  // 1FA1=>1FA9
  $1f,$aa,  // 1FA2=>1FAA
  $1f,$ab,  // 1FA3=>1FAB
  $1f,$ac,  // 1FA4=>1FAC
  $1f,$ad,  // 1FA5=>1FAD
  $1f,$ae,  // 1FA6=>1FAE
  $1f,$af,  // 1FA7=>1FAF
  $1f,$b8,  // 1FB0=>1FB8
  $1f,$b9,  // 1FB1=>1FB9
  $1f,$bc,  // 1FB3=>1FBC
  $03,$99,  // 1FBE=>0399
  $1f,$cc,  // 1FC3=>1FCC
  $1f,$d8,  // 1FD0=>1FD8
  $1f,$d9,  // 1FD1=>1FD9
  $1f,$e8,  // 1FE0=>1FE8
  $1f,$e9,  // 1FE1=>1FE9
  $1f,$ec,  // 1FE5=>1FEC
  $1f,$fc,  // 1FF3=>1FFC
  $21,$60,  // 2170=>2160
  $21,$61,  // 2171=>2161
  $21,$62,  // 2172=>2162
  $21,$63,  // 2173=>2163
  $21,$64,  // 2174=>2164
  $21,$65,  // 2175=>2165
  $21,$66,  // 2176=>2166
  $21,$67,  // 2177=>2167
  $21,$68,  // 2178=>2168
  $21,$69,  // 2179=>2169
  $21,$6a,  // 217A=>216A
  $21,$6b,  // 217B=>216B
  $21,$6c,  // 217C=>216C
  $21,$6d,  // 217D=>216D
  $21,$6e,  // 217E=>216E
  $21,$6f,  // 217F=>216F
  $24,$b6,  // 24D0=>24B6
  $24,$b7,  // 24D1=>24B7
  $24,$b8,  // 24D2=>24B8
  $24,$b9,  // 24D3=>24B9
  $24,$ba,  // 24D4=>24BA
  $24,$bb,  // 24D5=>24BB
  $24,$bc,  // 24D6=>24BC
  $24,$bd,  // 24D7=>24BD
  $24,$be,  // 24D8=>24BE
  $24,$bf,  // 24D9=>24BF
  $24,$c0,  // 24DA=>24C0
  $24,$c1,  // 24DB=>24C1
  $24,$c2,  // 24DC=>24C2
  $24,$c3,  // 24DD=>24C3
  $24,$c4,  // 24DE=>24C4
  $24,$c5,  // 24DF=>24C5
  $24,$c6,  // 24E0=>24C6
  $24,$c7,  // 24E1=>24C7
  $24,$c8,  // 24E2=>24C8
  $24,$c9,  // 24E3=>24C9
  $24,$ca,  // 24E4=>24CA
  $24,$cb,  // 24E5=>24CB
  $24,$cc,  // 24E6=>24CC
  $24,$cd,  // 24E7=>24CD
  $24,$ce,  // 24E8=>24CE
  $24,$cf,  // 24E9=>24CF
  $2c,$00,  // 2C30=>2C00
  $2c,$01,  // 2C31=>2C01
  $2c,$02,  // 2C32=>2C02
  $2c,$03,  // 2C33=>2C03
  $2c,$04,  // 2C34=>2C04
  $2c,$05,  // 2C35=>2C05
  $2c,$06,  // 2C36=>2C06
  $2c,$07,  // 2C37=>2C07
  $2c,$08,  // 2C38=>2C08
  $2c,$09,  // 2C39=>2C09
  $2c,$0a,  // 2C3A=>2C0A
  $2c,$0b,  // 2C3B=>2C0B
  $2c,$0c,  // 2C3C=>2C0C
  $2c,$0d,  // 2C3D=>2C0D
  $2c,$0e,  // 2C3E=>2C0E
  $2c,$0f,  // 2C3F=>2C0F
  $2c,$10,  // 2C40=>2C10
  $2c,$11,  // 2C41=>2C11
  $2c,$12,  // 2C42=>2C12
  $2c,$13,  // 2C43=>2C13
  $2c,$14,  // 2C44=>2C14
  $2c,$15,  // 2C45=>2C15
  $2c,$16,  // 2C46=>2C16
  $2c,$17,  // 2C47=>2C17
  $2c,$18,  // 2C48=>2C18
  $2c,$19,  // 2C49=>2C19
  $2c,$1a,  // 2C4A=>2C1A
  $2c,$1b,  // 2C4B=>2C1B
  $2c,$1c,  // 2C4C=>2C1C
  $2c,$1d,  // 2C4D=>2C1D
  $2c,$1e,  // 2C4E=>2C1E
  $2c,$1f,  // 2C4F=>2C1F
  $2c,$20,  // 2C50=>2C20
  $2c,$21,  // 2C51=>2C21
  $2c,$22,  // 2C52=>2C22
  $2c,$23,  // 2C53=>2C23
  $2c,$24,  // 2C54=>2C24
  $2c,$25,  // 2C55=>2C25
  $2c,$26,  // 2C56=>2C26
  $2c,$27,  // 2C57=>2C27
  $2c,$28,  // 2C58=>2C28
  $2c,$29,  // 2C59=>2C29
  $2c,$2a,  // 2C5A=>2C2A
  $2c,$2b,  // 2C5B=>2C2B
  $2c,$2c,  // 2C5C=>2C2C
  $2c,$2d,  // 2C5D=>2C2D
  $2c,$2e,  // 2C5E=>2C2E
  $2c,$80,  // 2C81=>2C80
  $2c,$82,  // 2C83=>2C82
  $2c,$84,  // 2C85=>2C84
  $2c,$86,  // 2C87=>2C86
  $2c,$88,  // 2C89=>2C88
  $2c,$8a,  // 2C8B=>2C8A
  $2c,$8c,  // 2C8D=>2C8C
  $2c,$8e,  // 2C8F=>2C8E
  $2c,$90,  // 2C91=>2C90
  $2c,$92,  // 2C93=>2C92
  $2c,$94,  // 2C95=>2C94
  $2c,$96,  // 2C97=>2C96
  $2c,$98,  // 2C99=>2C98
  $2c,$9a,  // 2C9B=>2C9A
  $2c,$9c,  // 2C9D=>2C9C
  $2c,$9e,  // 2C9F=>2C9E
  $2c,$a0,  // 2CA1=>2CA0
  $2c,$a2,  // 2CA3=>2CA2
  $2c,$a4,  // 2CA5=>2CA4
  $2c,$a6,  // 2CA7=>2CA6
  $2c,$a8,  // 2CA9=>2CA8
  $2c,$aa,  // 2CAB=>2CAA
  $2c,$ac,  // 2CAD=>2CAC
  $2c,$ae,  // 2CAF=>2CAE
  $2c,$b0,  // 2CB1=>2CB0
  $2c,$b2,  // 2CB3=>2CB2
  $2c,$b4,  // 2CB5=>2CB4
  $2c,$b6,  // 2CB7=>2CB6
  $2c,$b8,  // 2CB9=>2CB8
  $2c,$ba,  // 2CBB=>2CBA
  $2c,$bc,  // 2CBD=>2CBC
  $2c,$be,  // 2CBF=>2CBE
  $2c,$c0,  // 2CC1=>2CC0
  $2c,$c2,  // 2CC3=>2CC2
  $2c,$c4,  // 2CC5=>2CC4
  $2c,$c6,  // 2CC7=>2CC6
  $2c,$c8,  // 2CC9=>2CC8
  $2c,$ca,  // 2CCB=>2CCA
  $2c,$cc,  // 2CCD=>2CCC
  $2c,$ce,  // 2CCF=>2CCE
  $2c,$d0,  // 2CD1=>2CD0
  $2c,$d2,  // 2CD3=>2CD2
  $2c,$d4,  // 2CD5=>2CD4
  $2c,$d6,  // 2CD7=>2CD6
  $2c,$d8,  // 2CD9=>2CD8
  $2c,$da,  // 2CDB=>2CDA
  $2c,$dc,  // 2CDD=>2CDC
  $2c,$de,  // 2CDF=>2CDE
  $2c,$e0,  // 2CE1=>2CE0
  $2c,$e2,  // 2CE3=>2CE2
  $10,$a0,  // 2D00=>10A0
  $10,$a1,  // 2D01=>10A1
  $10,$a2,  // 2D02=>10A2
  $10,$a3,  // 2D03=>10A3
  $10,$a4,  // 2D04=>10A4
  $10,$a5,  // 2D05=>10A5
  $10,$a6,  // 2D06=>10A6
  $10,$a7,  // 2D07=>10A7
  $10,$a8,  // 2D08=>10A8
  $10,$a9,  // 2D09=>10A9
  $10,$aa,  // 2D0A=>10AA
  $10,$ab,  // 2D0B=>10AB
  $10,$ac,  // 2D0C=>10AC
  $10,$ad,  // 2D0D=>10AD
  $10,$ae,  // 2D0E=>10AE
  $10,$af,  // 2D0F=>10AF
  $10,$b0,  // 2D10=>10B0
  $10,$b1,  // 2D11=>10B1
  $10,$b2,  // 2D12=>10B2
  $10,$b3,  // 2D13=>10B3
  $10,$b4,  // 2D14=>10B4
  $10,$b5,  // 2D15=>10B5
  $10,$b6,  // 2D16=>10B6
  $10,$b7,  // 2D17=>10B7
  $10,$b8,  // 2D18=>10B8
  $10,$b9,  // 2D19=>10B9
  $10,$ba,  // 2D1A=>10BA
  $10,$bb,  // 2D1B=>10BB
  $10,$bc,  // 2D1C=>10BC
  $10,$bd,  // 2D1D=>10BD
  $10,$be,  // 2D1E=>10BE
  $10,$bf,  // 2D1F=>10BF
  $10,$c0,  // 2D20=>10C0
  $10,$c1,  // 2D21=>10C1
  $10,$c2,  // 2D22=>10C2
  $10,$c3,  // 2D23=>10C3
  $10,$c4,  // 2D24=>10C4
  $10,$c5,  // 2D25=>10C5
  $ff,$21,  // FF41=>FF21
  $ff,$22,  // FF42=>FF22
  $ff,$23,  // FF43=>FF23
  $ff,$24,  // FF44=>FF24
  $ff,$25,  // FF45=>FF25
  $ff,$26,  // FF46=>FF26
  $ff,$27,  // FF47=>FF27
  $ff,$28,  // FF48=>FF28
  $ff,$29,  // FF49=>FF29
  $ff,$2a,  // FF4A=>FF2A
  $ff,$2b,  // FF4B=>FF2B
  $ff,$2c,  // FF4C=>FF2C
  $ff,$2d,  // FF4D=>FF2D
  $ff,$2e,  // FF4E=>FF2E
  $ff,$2f,  // FF4F=>FF2F
  $ff,$30,  // FF50=>FF30
  $ff,$31,  // FF51=>FF31
  $ff,$32,  // FF52=>FF32
  $ff,$33,  // FF53=>FF33
  $ff,$34,  // FF54=>FF34
  $ff,$35,  // FF55=>FF35
  $ff,$36,  // FF56=>FF36
  $ff,$37,  // FF57=>FF37
  $ff,$38,  // FF58=>FF38
  $ff,$39,  // FF59=>FF39
  $ff,$3a   // FF5A=>FF3A
}

// Lower Case Lookup
VOLATILE CHAR cWCLowerLookup[] =
{
  $00,$41,  // 0041=>0061
  $00,$42,  // 0042=>0062
  $00,$43,  // 0043=>0063
  $00,$44,  // 0044=>0064
  $00,$45,  // 0045=>0065
  $00,$46,  // 0046=>0066
  $00,$47,  // 0047=>0067
  $00,$48,  // 0048=>0068
  $00,$49,  // 0049=>0069
  $00,$4a,  // 004A=>006A
  $00,$4b,  // 004B=>006B
  $00,$4c,  // 004C=>006C
  $00,$4d,  // 004D=>006D
  $00,$4e,  // 004E=>006E
  $00,$4f,  // 004F=>006F
  $00,$50,  // 0050=>0070
  $00,$51,  // 0051=>0071
  $00,$52,  // 0052=>0072
  $00,$53,  // 0053=>0073
  $00,$54,  // 0054=>0074
  $00,$55,  // 0055=>0075
  $00,$56,  // 0056=>0076
  $00,$57,  // 0057=>0077
  $00,$58,  // 0058=>0078
  $00,$59,  // 0059=>0079
  $00,$5a,  // 005A=>007A
  $00,$c0,  // 00C0=>00E0
  $00,$c1,  // 00C1=>00E1
  $00,$c2,  // 00C2=>00E2
  $00,$c3,  // 00C3=>00E3
  $00,$c4,  // 00C4=>00E4
  $00,$c5,  // 00C5=>00E5
  $00,$c6,  // 00C6=>00E6
  $00,$c7,  // 00C7=>00E7
  $00,$c8,  // 00C8=>00E8
  $00,$c9,  // 00C9=>00E9
  $00,$ca,  // 00CA=>00EA
  $00,$cb,  // 00CB=>00EB
  $00,$cc,  // 00CC=>00EC
  $00,$cd,  // 00CD=>00ED
  $00,$ce,  // 00CE=>00EE
  $00,$cf,  // 00CF=>00EF
  $00,$d0,  // 00D0=>00F0
  $00,$d1,  // 00D1=>00F1
  $00,$d2,  // 00D2=>00F2
  $00,$d3,  // 00D3=>00F3
  $00,$d4,  // 00D4=>00F4
  $00,$d5,  // 00D5=>00F5
  $00,$d6,  // 00D6=>00F6
  $00,$d8,  // 00D8=>00F8
  $00,$d9,  // 00D9=>00F9
  $00,$da,  // 00DA=>00FA
  $00,$db,  // 00DB=>00FB
  $00,$dc,  // 00DC=>00FC
  $00,$dd,  // 00DD=>00FD
  $00,$de,  // 00DE=>00FE
  $01,$00,  // 0100=>0101
  $01,$02,  // 0102=>0103
  $01,$04,  // 0104=>0105
  $01,$06,  // 0106=>0107
  $01,$08,  // 0108=>0109
  $01,$0a,  // 010A=>010B
  $01,$0c,  // 010C=>010D
  $01,$0e,  // 010E=>010F
  $01,$10,  // 0110=>0111
  $01,$12,  // 0112=>0113
  $01,$14,  // 0114=>0115
  $01,$16,  // 0116=>0117
  $01,$18,  // 0118=>0119
  $01,$1a,  // 011A=>011B
  $01,$1c,  // 011C=>011D
  $01,$1e,  // 011E=>011F
  $01,$20,  // 0120=>0121
  $01,$22,  // 0122=>0123
  $01,$24,  // 0124=>0125
  $01,$26,  // 0126=>0127
  $01,$28,  // 0128=>0129
  $01,$2a,  // 012A=>012B
  $01,$2c,  // 012C=>012D
  $01,$2e,  // 012E=>012F
  $01,$30,  // 0130=>0069
  $01,$32,  // 0132=>0133
  $01,$34,  // 0134=>0135
  $01,$36,  // 0136=>0137
  $01,$39,  // 0139=>013A
  $01,$3b,  // 013B=>013C
  $01,$3d,  // 013D=>013E
  $01,$3f,  // 013F=>0140
  $01,$41,  // 0141=>0142
  $01,$43,  // 0143=>0144
  $01,$45,  // 0145=>0146
  $01,$47,  // 0147=>0148
  $01,$4a,  // 014A=>014B
  $01,$4c,  // 014C=>014D
  $01,$4e,  // 014E=>014F
  $01,$50,  // 0150=>0151
  $01,$52,  // 0152=>0153
  $01,$54,  // 0154=>0155
  $01,$56,  // 0156=>0157
  $01,$58,  // 0158=>0159
  $01,$5a,  // 015A=>015B
  $01,$5c,  // 015C=>015D
  $01,$5e,  // 015E=>015F
  $01,$60,  // 0160=>0161
  $01,$62,  // 0162=>0163
  $01,$64,  // 0164=>0165
  $01,$66,  // 0166=>0167
  $01,$68,  // 0168=>0169
  $01,$6a,  // 016A=>016B
  $01,$6c,  // 016C=>016D
  $01,$6e,  // 016E=>016F
  $01,$70,  // 0170=>0171
  $01,$72,  // 0172=>0173
  $01,$74,  // 0174=>0175
  $01,$76,  // 0176=>0177
  $01,$78,  // 0178=>00FF
  $01,$79,  // 0179=>017A
  $01,$7b,  // 017B=>017C
  $01,$7d,  // 017D=>017E
  $01,$81,  // 0181=>0253
  $01,$82,  // 0182=>0183
  $01,$84,  // 0184=>0185
  $01,$86,  // 0186=>0254
  $01,$87,  // 0187=>0188
  $01,$89,  // 0189=>0256
  $01,$8a,  // 018A=>0257
  $01,$8b,  // 018B=>018C
  $01,$8e,  // 018E=>01DD
  $01,$8f,  // 018F=>0259
  $01,$90,  // 0190=>025B
  $01,$91,  // 0191=>0192
  $01,$93,  // 0193=>0260
  $01,$94,  // 0194=>0263
  $01,$96,  // 0196=>0269
  $01,$97,  // 0197=>0268
  $01,$98,  // 0198=>0199
  $01,$9c,  // 019C=>026F
  $01,$9d,  // 019D=>0272
  $01,$9f,  // 019F=>0275
  $01,$a0,  // 01A0=>01A1
  $01,$a2,  // 01A2=>01A3
  $01,$a4,  // 01A4=>01A5
  $01,$a6,  // 01A6=>0280
  $01,$a7,  // 01A7=>01A8
  $01,$a9,  // 01A9=>0283
  $01,$ac,  // 01AC=>01AD
  $01,$ae,  // 01AE=>0288
  $01,$af,  // 01AF=>01B0
  $01,$b1,  // 01B1=>028A
  $01,$b2,  // 01B2=>028B
  $01,$b3,  // 01B3=>01B4
  $01,$b5,  // 01B5=>01B6
  $01,$b7,  // 01B7=>0292
  $01,$b8,  // 01B8=>01B9
  $01,$bc,  // 01BC=>01BD
  $01,$c4,  // 01C4=>01C6
  $01,$c5,  // 01C5=>01C6
  $01,$c7,  // 01C7=>01C9
  $01,$c8,  // 01C8=>01C9
  $01,$ca,  // 01CA=>01CC
  $01,$cb,  // 01CB=>01CC
  $01,$cd,  // 01CD=>01CE
  $01,$cf,  // 01CF=>01D0
  $01,$d1,  // 01D1=>01D2
  $01,$d3,  // 01D3=>01D4
  $01,$d5,  // 01D5=>01D6
  $01,$d7,  // 01D7=>01D8
  $01,$d9,  // 01D9=>01DA
  $01,$db,  // 01DB=>01DC
  $01,$de,  // 01DE=>01DF
  $01,$e0,  // 01E0=>01E1
  $01,$e2,  // 01E2=>01E3
  $01,$e4,  // 01E4=>01E5
  $01,$e6,  // 01E6=>01E7
  $01,$e8,  // 01E8=>01E9
  $01,$ea,  // 01EA=>01EB
  $01,$ec,  // 01EC=>01ED
  $01,$ee,  // 01EE=>01EF
  $01,$f1,  // 01F1=>01F3
  $01,$f2,  // 01F2=>01F3
  $01,$f4,  // 01F4=>01F5
  $01,$f6,  // 01F6=>0195
  $01,$f7,  // 01F7=>01BF
  $01,$f8,  // 01F8=>01F9
  $01,$fa,  // 01FA=>01FB
  $01,$fc,  // 01FC=>01FD
  $01,$fe,  // 01FE=>01FF
  $02,$00,  // 0200=>0201
  $02,$02,  // 0202=>0203
  $02,$04,  // 0204=>0205
  $02,$06,  // 0206=>0207
  $02,$08,  // 0208=>0209
  $02,$0a,  // 020A=>020B
  $02,$0c,  // 020C=>020D
  $02,$0e,  // 020E=>020F
  $02,$10,  // 0210=>0211
  $02,$12,  // 0212=>0213
  $02,$14,  // 0214=>0215
  $02,$16,  // 0216=>0217
  $02,$18,  // 0218=>0219
  $02,$1a,  // 021A=>021B
  $02,$1c,  // 021C=>021D
  $02,$1e,  // 021E=>021F
  $02,$20,  // 0220=>019E
  $02,$22,  // 0222=>0223
  $02,$24,  // 0224=>0225
  $02,$26,  // 0226=>0227
  $02,$28,  // 0228=>0229
  $02,$2a,  // 022A=>022B
  $02,$2c,  // 022C=>022D
  $02,$2e,  // 022E=>022F
  $02,$30,  // 0230=>0231
  $02,$32,  // 0232=>0233
  $02,$3b,  // 023B=>023C
  $02,$3d,  // 023D=>019A
  $02,$41,  // 0241=>0294
  $03,$86,  // 0386=>03AC
  $03,$88,  // 0388=>03AD
  $03,$89,  // 0389=>03AE
  $03,$8a,  // 038A=>03AF
  $03,$8c,  // 038C=>03CC
  $03,$8e,  // 038E=>03CD
  $03,$8f,  // 038F=>03CE
  $03,$91,  // 0391=>03B1
  $03,$92,  // 0392=>03B2
  $03,$93,  // 0393=>03B3
  $03,$94,  // 0394=>03B4
  $03,$95,  // 0395=>03B5
  $03,$96,  // 0396=>03B6
  $03,$97,  // 0397=>03B7
  $03,$98,  // 0398=>03B8
  $03,$99,  // 0399=>03B9
  $03,$9a,  // 039A=>03BA
  $03,$9b,  // 039B=>03BB
  $03,$9c,  // 039C=>03BC
  $03,$9d,  // 039D=>03BD
  $03,$9e,  // 039E=>03BE
  $03,$9f,  // 039F=>03BF
  $03,$a0,  // 03A0=>03C0
  $03,$a1,  // 03A1=>03C1
  $03,$a3,  // 03A3=>03C3
  $03,$a4,  // 03A4=>03C4
  $03,$a5,  // 03A5=>03C5
  $03,$a6,  // 03A6=>03C6
  $03,$a7,  // 03A7=>03C7
  $03,$a8,  // 03A8=>03C8
  $03,$a9,  // 03A9=>03C9
  $03,$aa,  // 03AA=>03CA
  $03,$ab,  // 03AB=>03CB
  $03,$d8,  // 03D8=>03D9
  $03,$da,  // 03DA=>03DB
  $03,$dc,  // 03DC=>03DD
  $03,$de,  // 03DE=>03DF
  $03,$e0,  // 03E0=>03E1
  $03,$e2,  // 03E2=>03E3
  $03,$e4,  // 03E4=>03E5
  $03,$e6,  // 03E6=>03E7
  $03,$e8,  // 03E8=>03E9
  $03,$ea,  // 03EA=>03EB
  $03,$ec,  // 03EC=>03ED
  $03,$ee,  // 03EE=>03EF
  $03,$f4,  // 03F4=>03B8
  $03,$f7,  // 03F7=>03F8
  $03,$f9,  // 03F9=>03F2
  $03,$fa,  // 03FA=>03FB
  $04,$00,  // 0400=>0450
  $04,$01,  // 0401=>0451
  $04,$02,  // 0402=>0452
  $04,$03,  // 0403=>0453
  $04,$04,  // 0404=>0454
  $04,$05,  // 0405=>0455
  $04,$06,  // 0406=>0456
  $04,$07,  // 0407=>0457
  $04,$08,  // 0408=>0458
  $04,$09,  // 0409=>0459
  $04,$0a,  // 040A=>045A
  $04,$0b,  // 040B=>045B
  $04,$0c,  // 040C=>045C
  $04,$0d,  // 040D=>045D
  $04,$0e,  // 040E=>045E
  $04,$0f,  // 040F=>045F
  $04,$10,  // 0410=>0430
  $04,$11,  // 0411=>0431
  $04,$12,  // 0412=>0432
  $04,$13,  // 0413=>0433
  $04,$14,  // 0414=>0434
  $04,$15,  // 0415=>0435
  $04,$16,  // 0416=>0436
  $04,$17,  // 0417=>0437
  $04,$18,  // 0418=>0438
  $04,$19,  // 0419=>0439
  $04,$1a,  // 041A=>043A
  $04,$1b,  // 041B=>043B
  $04,$1c,  // 041C=>043C
  $04,$1d,  // 041D=>043D
  $04,$1e,  // 041E=>043E
  $04,$1f,  // 041F=>043F
  $04,$20,  // 0420=>0440
  $04,$21,  // 0421=>0441
  $04,$22,  // 0422=>0442
  $04,$23,  // 0423=>0443
  $04,$24,  // 0424=>0444
  $04,$25,  // 0425=>0445
  $04,$26,  // 0426=>0446
  $04,$27,  // 0427=>0447
  $04,$28,  // 0428=>0448
  $04,$29,  // 0429=>0449
  $04,$2a,  // 042A=>044A
  $04,$2b,  // 042B=>044B
  $04,$2c,  // 042C=>044C
  $04,$2d,  // 042D=>044D
  $04,$2e,  // 042E=>044E
  $04,$2f,  // 042F=>044F
  $04,$60,  // 0460=>0461
  $04,$62,  // 0462=>0463
  $04,$64,  // 0464=>0465
  $04,$66,  // 0466=>0467
  $04,$68,  // 0468=>0469
  $04,$6a,  // 046A=>046B
  $04,$6c,  // 046C=>046D
  $04,$6e,  // 046E=>046F
  $04,$70,  // 0470=>0471
  $04,$72,  // 0472=>0473
  $04,$74,  // 0474=>0475
  $04,$76,  // 0476=>0477
  $04,$78,  // 0478=>0479
  $04,$7a,  // 047A=>047B
  $04,$7c,  // 047C=>047D
  $04,$7e,  // 047E=>047F
  $04,$80,  // 0480=>0481
  $04,$8a,  // 048A=>048B
  $04,$8c,  // 048C=>048D
  $04,$8e,  // 048E=>048F
  $04,$90,  // 0490=>0491
  $04,$92,  // 0492=>0493
  $04,$94,  // 0494=>0495
  $04,$96,  // 0496=>0497
  $04,$98,  // 0498=>0499
  $04,$9a,  // 049A=>049B
  $04,$9c,  // 049C=>049D
  $04,$9e,  // 049E=>049F
  $04,$a0,  // 04A0=>04A1
  $04,$a2,  // 04A2=>04A3
  $04,$a4,  // 04A4=>04A5
  $04,$a6,  // 04A6=>04A7
  $04,$a8,  // 04A8=>04A9
  $04,$aa,  // 04AA=>04AB
  $04,$ac,  // 04AC=>04AD
  $04,$ae,  // 04AE=>04AF
  $04,$b0,  // 04B0=>04B1
  $04,$b2,  // 04B2=>04B3
  $04,$b4,  // 04B4=>04B5
  $04,$b6,  // 04B6=>04B7
  $04,$b8,  // 04B8=>04B9
  $04,$ba,  // 04BA=>04BB
  $04,$bc,  // 04BC=>04BD
  $04,$be,  // 04BE=>04BF
  $04,$c1,  // 04C1=>04C2
  $04,$c3,  // 04C3=>04C4
  $04,$c5,  // 04C5=>04C6
  $04,$c7,  // 04C7=>04C8
  $04,$c9,  // 04C9=>04CA
  $04,$cb,  // 04CB=>04CC
  $04,$cd,  // 04CD=>04CE
  $04,$d0,  // 04D0=>04D1
  $04,$d2,  // 04D2=>04D3
  $04,$d4,  // 04D4=>04D5
  $04,$d6,  // 04D6=>04D7
  $04,$d8,  // 04D8=>04D9
  $04,$da,  // 04DA=>04DB
  $04,$dc,  // 04DC=>04DD
  $04,$de,  // 04DE=>04DF
  $04,$e0,  // 04E0=>04E1
  $04,$e2,  // 04E2=>04E3
  $04,$e4,  // 04E4=>04E5
  $04,$e6,  // 04E6=>04E7
  $04,$e8,  // 04E8=>04E9
  $04,$ea,  // 04EA=>04EB
  $04,$ec,  // 04EC=>04ED
  $04,$ee,  // 04EE=>04EF
  $04,$f0,  // 04F0=>04F1
  $04,$f2,  // 04F2=>04F3
  $04,$f4,  // 04F4=>04F5
  $04,$f6,  // 04F6=>04F7
  $04,$f8,  // 04F8=>04F9
  $05,$00,  // 0500=>0501
  $05,$02,  // 0502=>0503
  $05,$04,  // 0504=>0505
  $05,$06,  // 0506=>0507
  $05,$08,  // 0508=>0509
  $05,$0a,  // 050A=>050B
  $05,$0c,  // 050C=>050D
  $05,$0e,  // 050E=>050F
  $05,$31,  // 0531=>0561
  $05,$32,  // 0532=>0562
  $05,$33,  // 0533=>0563
  $05,$34,  // 0534=>0564
  $05,$35,  // 0535=>0565
  $05,$36,  // 0536=>0566
  $05,$37,  // 0537=>0567
  $05,$38,  // 0538=>0568
  $05,$39,  // 0539=>0569
  $05,$3a,  // 053A=>056A
  $05,$3b,  // 053B=>056B
  $05,$3c,  // 053C=>056C
  $05,$3d,  // 053D=>056D
  $05,$3e,  // 053E=>056E
  $05,$3f,  // 053F=>056F
  $05,$40,  // 0540=>0570
  $05,$41,  // 0541=>0571
  $05,$42,  // 0542=>0572
  $05,$43,  // 0543=>0573
  $05,$44,  // 0544=>0574
  $05,$45,  // 0545=>0575
  $05,$46,  // 0546=>0576
  $05,$47,  // 0547=>0577
  $05,$48,  // 0548=>0578
  $05,$49,  // 0549=>0579
  $05,$4a,  // 054A=>057A
  $05,$4b,  // 054B=>057B
  $05,$4c,  // 054C=>057C
  $05,$4d,  // 054D=>057D
  $05,$4e,  // 054E=>057E
  $05,$4f,  // 054F=>057F
  $05,$50,  // 0550=>0580
  $05,$51,  // 0551=>0581
  $05,$52,  // 0552=>0582
  $05,$53,  // 0553=>0583
  $05,$54,  // 0554=>0584
  $05,$55,  // 0555=>0585
  $05,$56,  // 0556=>0586
  $10,$a0,  // 10A0=>2D00
  $10,$a1,  // 10A1=>2D01
  $10,$a2,  // 10A2=>2D02
  $10,$a3,  // 10A3=>2D03
  $10,$a4,  // 10A4=>2D04
  $10,$a5,  // 10A5=>2D05
  $10,$a6,  // 10A6=>2D06
  $10,$a7,  // 10A7=>2D07
  $10,$a8,  // 10A8=>2D08
  $10,$a9,  // 10A9=>2D09
  $10,$aa,  // 10AA=>2D0A
  $10,$ab,  // 10AB=>2D0B
  $10,$ac,  // 10AC=>2D0C
  $10,$ad,  // 10AD=>2D0D
  $10,$ae,  // 10AE=>2D0E
  $10,$af,  // 10AF=>2D0F
  $10,$b0,  // 10B0=>2D10
  $10,$b1,  // 10B1=>2D11
  $10,$b2,  // 10B2=>2D12
  $10,$b3,  // 10B3=>2D13
  $10,$b4,  // 10B4=>2D14
  $10,$b5,  // 10B5=>2D15
  $10,$b6,  // 10B6=>2D16
  $10,$b7,  // 10B7=>2D17
  $10,$b8,  // 10B8=>2D18
  $10,$b9,  // 10B9=>2D19
  $10,$ba,  // 10BA=>2D1A
  $10,$bb,  // 10BB=>2D1B
  $10,$bc,  // 10BC=>2D1C
  $10,$bd,  // 10BD=>2D1D
  $10,$be,  // 10BE=>2D1E
  $10,$bf,  // 10BF=>2D1F
  $10,$c0,  // 10C0=>2D20
  $10,$c1,  // 10C1=>2D21
  $10,$c2,  // 10C2=>2D22
  $10,$c3,  // 10C3=>2D23
  $10,$c4,  // 10C4=>2D24
  $10,$c5,  // 10C5=>2D25
  $1e,$00,  // 1E00=>1E01
  $1e,$02,  // 1E02=>1E03
  $1e,$04,  // 1E04=>1E05
  $1e,$06,  // 1E06=>1E07
  $1e,$08,  // 1E08=>1E09
  $1e,$0a,  // 1E0A=>1E0B
  $1e,$0c,  // 1E0C=>1E0D
  $1e,$0e,  // 1E0E=>1E0F
  $1e,$10,  // 1E10=>1E11
  $1e,$12,  // 1E12=>1E13
  $1e,$14,  // 1E14=>1E15
  $1e,$16,  // 1E16=>1E17
  $1e,$18,  // 1E18=>1E19
  $1e,$1a,  // 1E1A=>1E1B
  $1e,$1c,  // 1E1C=>1E1D
  $1e,$1e,  // 1E1E=>1E1F
  $1e,$20,  // 1E20=>1E21
  $1e,$22,  // 1E22=>1E23
  $1e,$24,  // 1E24=>1E25
  $1e,$26,  // 1E26=>1E27
  $1e,$28,  // 1E28=>1E29
  $1e,$2a,  // 1E2A=>1E2B
  $1e,$2c,  // 1E2C=>1E2D
  $1e,$2e,  // 1E2E=>1E2F
  $1e,$30,  // 1E30=>1E31
  $1e,$32,  // 1E32=>1E33
  $1e,$34,  // 1E34=>1E35
  $1e,$36,  // 1E36=>1E37
  $1e,$38,  // 1E38=>1E39
  $1e,$3a,  // 1E3A=>1E3B
  $1e,$3c,  // 1E3C=>1E3D
  $1e,$3e,  // 1E3E=>1E3F
  $1e,$40,  // 1E40=>1E41
  $1e,$42,  // 1E42=>1E43
  $1e,$44,  // 1E44=>1E45
  $1e,$46,  // 1E46=>1E47
  $1e,$48,  // 1E48=>1E49
  $1e,$4a,  // 1E4A=>1E4B
  $1e,$4c,  // 1E4C=>1E4D
  $1e,$4e,  // 1E4E=>1E4F
  $1e,$50,  // 1E50=>1E51
  $1e,$52,  // 1E52=>1E53
  $1e,$54,  // 1E54=>1E55
  $1e,$56,  // 1E56=>1E57
  $1e,$58,  // 1E58=>1E59
  $1e,$5a,  // 1E5A=>1E5B
  $1e,$5c,  // 1E5C=>1E5D
  $1e,$5e,  // 1E5E=>1E5F
  $1e,$60,  // 1E60=>1E61
  $1e,$62,  // 1E62=>1E63
  $1e,$64,  // 1E64=>1E65
  $1e,$66,  // 1E66=>1E67
  $1e,$68,  // 1E68=>1E69
  $1e,$6a,  // 1E6A=>1E6B
  $1e,$6c,  // 1E6C=>1E6D
  $1e,$6e,  // 1E6E=>1E6F
  $1e,$70,  // 1E70=>1E71
  $1e,$72,  // 1E72=>1E73
  $1e,$74,  // 1E74=>1E75
  $1e,$76,  // 1E76=>1E77
  $1e,$78,  // 1E78=>1E79
  $1e,$7a,  // 1E7A=>1E7B
  $1e,$7c,  // 1E7C=>1E7D
  $1e,$7e,  // 1E7E=>1E7F
  $1e,$80,  // 1E80=>1E81
  $1e,$82,  // 1E82=>1E83
  $1e,$84,  // 1E84=>1E85
  $1e,$86,  // 1E86=>1E87
  $1e,$88,  // 1E88=>1E89
  $1e,$8a,  // 1E8A=>1E8B
  $1e,$8c,  // 1E8C=>1E8D
  $1e,$8e,  // 1E8E=>1E8F
  $1e,$90,  // 1E90=>1E91
  $1e,$92,  // 1E92=>1E93
  $1e,$94,  // 1E94=>1E95
  $1e,$a0,  // 1EA0=>1EA1
  $1e,$a2,  // 1EA2=>1EA3
  $1e,$a4,  // 1EA4=>1EA5
  $1e,$a6,  // 1EA6=>1EA7
  $1e,$a8,  // 1EA8=>1EA9
  $1e,$aa,  // 1EAA=>1EAB
  $1e,$ac,  // 1EAC=>1EAD
  $1e,$ae,  // 1EAE=>1EAF
  $1e,$b0,  // 1EB0=>1EB1
  $1e,$b2,  // 1EB2=>1EB3
  $1e,$b4,  // 1EB4=>1EB5
  $1e,$b6,  // 1EB6=>1EB7
  $1e,$b8,  // 1EB8=>1EB9
  $1e,$ba,  // 1EBA=>1EBB
  $1e,$bc,  // 1EBC=>1EBD
  $1e,$be,  // 1EBE=>1EBF
  $1e,$c0,  // 1EC0=>1EC1
  $1e,$c2,  // 1EC2=>1EC3
  $1e,$c4,  // 1EC4=>1EC5
  $1e,$c6,  // 1EC6=>1EC7
  $1e,$c8,  // 1EC8=>1EC9
  $1e,$ca,  // 1ECA=>1ECB
  $1e,$cc,  // 1ECC=>1ECD
  $1e,$ce,  // 1ECE=>1ECF
  $1e,$d0,  // 1ED0=>1ED1
  $1e,$d2,  // 1ED2=>1ED3
  $1e,$d4,  // 1ED4=>1ED5
  $1e,$d6,  // 1ED6=>1ED7
  $1e,$d8,  // 1ED8=>1ED9
  $1e,$da,  // 1EDA=>1EDB
  $1e,$dc,  // 1EDC=>1EDD
  $1e,$de,  // 1EDE=>1EDF
  $1e,$e0,  // 1EE0=>1EE1
  $1e,$e2,  // 1EE2=>1EE3
  $1e,$e4,  // 1EE4=>1EE5
  $1e,$e6,  // 1EE6=>1EE7
  $1e,$e8,  // 1EE8=>1EE9
  $1e,$ea,  // 1EEA=>1EEB
  $1e,$ec,  // 1EEC=>1EED
  $1e,$ee,  // 1EEE=>1EEF
  $1e,$f0,  // 1EF0=>1EF1
  $1e,$f2,  // 1EF2=>1EF3
  $1e,$f4,  // 1EF4=>1EF5
  $1e,$f6,  // 1EF6=>1EF7
  $1e,$f8,  // 1EF8=>1EF9
  $1f,$08,  // 1F08=>1F00
  $1f,$09,  // 1F09=>1F01
  $1f,$0a,  // 1F0A=>1F02
  $1f,$0b,  // 1F0B=>1F03
  $1f,$0c,  // 1F0C=>1F04
  $1f,$0d,  // 1F0D=>1F05
  $1f,$0e,  // 1F0E=>1F06
  $1f,$0f,  // 1F0F=>1F07
  $1f,$18,  // 1F18=>1F10
  $1f,$19,  // 1F19=>1F11
  $1f,$1a,  // 1F1A=>1F12
  $1f,$1b,  // 1F1B=>1F13
  $1f,$1c,  // 1F1C=>1F14
  $1f,$1d,  // 1F1D=>1F15
  $1f,$28,  // 1F28=>1F20
  $1f,$29,  // 1F29=>1F21
  $1f,$2a,  // 1F2A=>1F22
  $1f,$2b,  // 1F2B=>1F23
  $1f,$2c,  // 1F2C=>1F24
  $1f,$2d,  // 1F2D=>1F25
  $1f,$2e,  // 1F2E=>1F26
  $1f,$2f,  // 1F2F=>1F27
  $1f,$38,  // 1F38=>1F30
  $1f,$39,  // 1F39=>1F31
  $1f,$3a,  // 1F3A=>1F32
  $1f,$3b,  // 1F3B=>1F33
  $1f,$3c,  // 1F3C=>1F34
  $1f,$3d,  // 1F3D=>1F35
  $1f,$3e,  // 1F3E=>1F36
  $1f,$3f,  // 1F3F=>1F37
  $1f,$48,  // 1F48=>1F40
  $1f,$49,  // 1F49=>1F41
  $1f,$4a,  // 1F4A=>1F42
  $1f,$4b,  // 1F4B=>1F43
  $1f,$4c,  // 1F4C=>1F44
  $1f,$4d,  // 1F4D=>1F45
  $1f,$59,  // 1F59=>1F51
  $1f,$5b,  // 1F5B=>1F53
  $1f,$5d,  // 1F5D=>1F55
  $1f,$5f,  // 1F5F=>1F57
  $1f,$68,  // 1F68=>1F60
  $1f,$69,  // 1F69=>1F61
  $1f,$6a,  // 1F6A=>1F62
  $1f,$6b,  // 1F6B=>1F63
  $1f,$6c,  // 1F6C=>1F64
  $1f,$6d,  // 1F6D=>1F65
  $1f,$6e,  // 1F6E=>1F66
  $1f,$6f,  // 1F6F=>1F67
  $1f,$88,  // 1F88=>1F80
  $1f,$89,  // 1F89=>1F81
  $1f,$8a,  // 1F8A=>1F82
  $1f,$8b,  // 1F8B=>1F83
  $1f,$8c,  // 1F8C=>1F84
  $1f,$8d,  // 1F8D=>1F85
  $1f,$8e,  // 1F8E=>1F86
  $1f,$8f,  // 1F8F=>1F87
  $1f,$98,  // 1F98=>1F90
  $1f,$99,  // 1F99=>1F91
  $1f,$9a,  // 1F9A=>1F92
  $1f,$9b,  // 1F9B=>1F93
  $1f,$9c,  // 1F9C=>1F94
  $1f,$9d,  // 1F9D=>1F95
  $1f,$9e,  // 1F9E=>1F96
  $1f,$9f,  // 1F9F=>1F97
  $1f,$a8,  // 1FA8=>1FA0
  $1f,$a9,  // 1FA9=>1FA1
  $1f,$aa,  // 1FAA=>1FA2
  $1f,$ab,  // 1FAB=>1FA3
  $1f,$ac,  // 1FAC=>1FA4
  $1f,$ad,  // 1FAD=>1FA5
  $1f,$ae,  // 1FAE=>1FA6
  $1f,$af,  // 1FAF=>1FA7
  $1f,$b8,  // 1FB8=>1FB0
  $1f,$b9,  // 1FB9=>1FB1
  $1f,$ba,  // 1FBA=>1F70
  $1f,$bb,  // 1FBB=>1F71
  $1f,$bc,  // 1FBC=>1FB3
  $1f,$c8,  // 1FC8=>1F72
  $1f,$c9,  // 1FC9=>1F73
  $1f,$ca,  // 1FCA=>1F74
  $1f,$cb,  // 1FCB=>1F75
  $1f,$cc,  // 1FCC=>1FC3
  $1f,$d8,  // 1FD8=>1FD0
  $1f,$d9,  // 1FD9=>1FD1
  $1f,$da,  // 1FDA=>1F76
  $1f,$db,  // 1FDB=>1F77
  $1f,$e8,  // 1FE8=>1FE0
  $1f,$e9,  // 1FE9=>1FE1
  $1f,$ea,  // 1FEA=>1F7A
  $1f,$eb,  // 1FEB=>1F7B
  $1f,$ec,  // 1FEC=>1FE5
  $1f,$f8,  // 1FF8=>1F78
  $1f,$f9,  // 1FF9=>1F79
  $1f,$fa,  // 1FFA=>1F7C
  $1f,$fb,  // 1FFB=>1F7D
  $1f,$fc,  // 1FFC=>1FF3
  $21,$26,  // 2126=>03C9
  $21,$2a,  // 212A=>006B
  $21,$2b,  // 212B=>00E5
  $21,$60,  // 2160=>2170
  $21,$61,  // 2161=>2171
  $21,$62,  // 2162=>2172
  $21,$63,  // 2163=>2173
  $21,$64,  // 2164=>2174
  $21,$65,  // 2165=>2175
  $21,$66,  // 2166=>2176
  $21,$67,  // 2167=>2177
  $21,$68,  // 2168=>2178
  $21,$69,  // 2169=>2179
  $21,$6a,  // 216A=>217A
  $21,$6b,  // 216B=>217B
  $21,$6c,  // 216C=>217C
  $21,$6d,  // 216D=>217D
  $21,$6e,  // 216E=>217E
  $21,$6f,  // 216F=>217F
  $24,$b6,  // 24B6=>24D0
  $24,$b7,  // 24B7=>24D1
  $24,$b8,  // 24B8=>24D2
  $24,$b9,  // 24B9=>24D3
  $24,$ba,  // 24BA=>24D4
  $24,$bb,  // 24BB=>24D5
  $24,$bc,  // 24BC=>24D6
  $24,$bd,  // 24BD=>24D7
  $24,$be,  // 24BE=>24D8
  $24,$bf,  // 24BF=>24D9
  $24,$c0,  // 24C0=>24DA
  $24,$c1,  // 24C1=>24DB
  $24,$c2,  // 24C2=>24DC
  $24,$c3,  // 24C3=>24DD
  $24,$c4,  // 24C4=>24DE
  $24,$c5,  // 24C5=>24DF
  $24,$c6,  // 24C6=>24E0
  $24,$c7,  // 24C7=>24E1
  $24,$c8,  // 24C8=>24E2
  $24,$c9,  // 24C9=>24E3
  $24,$ca,  // 24CA=>24E4
  $24,$cb,  // 24CB=>24E5
  $24,$cc,  // 24CC=>24E6
  $24,$cd,  // 24CD=>24E7
  $24,$ce,  // 24CE=>24E8
  $24,$cf,  // 24CF=>24E9
  $2c,$00,  // 2C00=>2C30
  $2c,$01,  // 2C01=>2C31
  $2c,$02,  // 2C02=>2C32
  $2c,$03,  // 2C03=>2C33
  $2c,$04,  // 2C04=>2C34
  $2c,$05,  // 2C05=>2C35
  $2c,$06,  // 2C06=>2C36
  $2c,$07,  // 2C07=>2C37
  $2c,$08,  // 2C08=>2C38
  $2c,$09,  // 2C09=>2C39
  $2c,$0a,  // 2C0A=>2C3A
  $2c,$0b,  // 2C0B=>2C3B
  $2c,$0c,  // 2C0C=>2C3C
  $2c,$0d,  // 2C0D=>2C3D
  $2c,$0e,  // 2C0E=>2C3E
  $2c,$0f,  // 2C0F=>2C3F
  $2c,$10,  // 2C10=>2C40
  $2c,$11,  // 2C11=>2C41
  $2c,$12,  // 2C12=>2C42
  $2c,$13,  // 2C13=>2C43
  $2c,$14,  // 2C14=>2C44
  $2c,$15,  // 2C15=>2C45
  $2c,$16,  // 2C16=>2C46
  $2c,$17,  // 2C17=>2C47
  $2c,$18,  // 2C18=>2C48
  $2c,$19,  // 2C19=>2C49
  $2c,$1a,  // 2C1A=>2C4A
  $2c,$1b,  // 2C1B=>2C4B
  $2c,$1c,  // 2C1C=>2C4C
  $2c,$1d,  // 2C1D=>2C4D
  $2c,$1e,  // 2C1E=>2C4E
  $2c,$1f,  // 2C1F=>2C4F
  $2c,$20,  // 2C20=>2C50
  $2c,$21,  // 2C21=>2C51
  $2c,$22,  // 2C22=>2C52
  $2c,$23,  // 2C23=>2C53
  $2c,$24,  // 2C24=>2C54
  $2c,$25,  // 2C25=>2C55
  $2c,$26,  // 2C26=>2C56
  $2c,$27,  // 2C27=>2C57
  $2c,$28,  // 2C28=>2C58
  $2c,$29,  // 2C29=>2C59
  $2c,$2a,  // 2C2A=>2C5A
  $2c,$2b,  // 2C2B=>2C5B
  $2c,$2c,  // 2C2C=>2C5C
  $2c,$2d,  // 2C2D=>2C5D
  $2c,$2e,  // 2C2E=>2C5E
  $2c,$80,  // 2C80=>2C81
  $2c,$82,  // 2C82=>2C83
  $2c,$84,  // 2C84=>2C85
  $2c,$86,  // 2C86=>2C87
  $2c,$88,  // 2C88=>2C89
  $2c,$8a,  // 2C8A=>2C8B
  $2c,$8c,  // 2C8C=>2C8D
  $2c,$8e,  // 2C8E=>2C8F
  $2c,$90,  // 2C90=>2C91
  $2c,$92,  // 2C92=>2C93
  $2c,$94,  // 2C94=>2C95
  $2c,$96,  // 2C96=>2C97
  $2c,$98,  // 2C98=>2C99
  $2c,$9a,  // 2C9A=>2C9B
  $2c,$9c,  // 2C9C=>2C9D
  $2c,$9e,  // 2C9E=>2C9F
  $2c,$a0,  // 2CA0=>2CA1
  $2c,$a2,  // 2CA2=>2CA3
  $2c,$a4,  // 2CA4=>2CA5
  $2c,$a6,  // 2CA6=>2CA7
  $2c,$a8,  // 2CA8=>2CA9
  $2c,$aa,  // 2CAA=>2CAB
  $2c,$ac,  // 2CAC=>2CAD
  $2c,$ae,  // 2CAE=>2CAF
  $2c,$b0,  // 2CB0=>2CB1
  $2c,$b2,  // 2CB2=>2CB3
  $2c,$b4,  // 2CB4=>2CB5
  $2c,$b6,  // 2CB6=>2CB7
  $2c,$b8,  // 2CB8=>2CB9
  $2c,$ba,  // 2CBA=>2CBB
  $2c,$bc,  // 2CBC=>2CBD
  $2c,$be,  // 2CBE=>2CBF
  $2c,$c0,  // 2CC0=>2CC1
  $2c,$c2,  // 2CC2=>2CC3
  $2c,$c4,  // 2CC4=>2CC5
  $2c,$c6,  // 2CC6=>2CC7
  $2c,$c8,  // 2CC8=>2CC9
  $2c,$ca,  // 2CCA=>2CCB
  $2c,$cc,  // 2CCC=>2CCD
  $2c,$ce,  // 2CCE=>2CCF
  $2c,$d0,  // 2CD0=>2CD1
  $2c,$d2,  // 2CD2=>2CD3
  $2c,$d4,  // 2CD4=>2CD5
  $2c,$d6,  // 2CD6=>2CD7
  $2c,$d8,  // 2CD8=>2CD9
  $2c,$da,  // 2CDA=>2CDB
  $2c,$dc,  // 2CDC=>2CDD
  $2c,$de,  // 2CDE=>2CDF
  $2c,$e0,  // 2CE0=>2CE1
  $2c,$e2,  // 2CE2=>2CE3
  $ff,$21,  // FF21=>FF41
  $ff,$22,  // FF22=>FF42
  $ff,$23,  // FF23=>FF43
  $ff,$24,  // FF24=>FF44
  $ff,$25,  // FF25=>FF45
  $ff,$26,  // FF26=>FF46
  $ff,$27,  // FF27=>FF47
  $ff,$28,  // FF28=>FF48
  $ff,$29,  // FF29=>FF49
  $ff,$2a,  // FF2A=>FF4A
  $ff,$2b,  // FF2B=>FF4B
  $ff,$2c,  // FF2C=>FF4C
  $ff,$2d,  // FF2D=>FF4D
  $ff,$2e,  // FF2E=>FF4E
  $ff,$2f,  // FF2F=>FF4F
  $ff,$30,  // FF30=>FF50
  $ff,$31,  // FF31=>FF51
  $ff,$32,  // FF32=>FF52
  $ff,$33,  // FF33=>FF53
  $ff,$34,  // FF34=>FF54
  $ff,$35,  // FF35=>FF55
  $ff,$36,  // FF36=>FF56
  $ff,$37,  // FF37=>FF57
  $ff,$38,  // FF38=>FF58
  $ff,$39,  // FF39=>FF59
  $ff,$3a   // FF3A=>FF5A
}

// Lower Case Result

VOLATILE CHAR cWCLowerResult[] =
{
  $00,$61,  // 0041=>0061
  $00,$62,  // 0042=>0062
  $00,$63,  // 0043=>0063
  $00,$64,  // 0044=>0064
  $00,$65,  // 0045=>0065
  $00,$66,  // 0046=>0066
  $00,$67,  // 0047=>0067
  $00,$68,  // 0048=>0068
  $00,$69,  // 0049=>0069
  $00,$6a,  // 004A=>006A
  $00,$6b,  // 004B=>006B
  $00,$6c,  // 004C=>006C
  $00,$6d,  // 004D=>006D
  $00,$6e,  // 004E=>006E
  $00,$6f,  // 004F=>006F
  $00,$70,  // 0050=>0070
  $00,$71,  // 0051=>0071
  $00,$72,  // 0052=>0072
  $00,$73,  // 0053=>0073
  $00,$74,  // 0054=>0074
  $00,$75,  // 0055=>0075
  $00,$76,  // 0056=>0076
  $00,$77,  // 0057=>0077
  $00,$78,  // 0058=>0078
  $00,$79,  // 0059=>0079
  $00,$7a,  // 005A=>007A
  $00,$e0,  // 00C0=>00E0
  $00,$e1,  // 00C1=>00E1
  $00,$e2,  // 00C2=>00E2
  $00,$e3,  // 00C3=>00E3
  $00,$e4,  // 00C4=>00E4
  $00,$e5,  // 00C5=>00E5
  $00,$e6,  // 00C6=>00E6
  $00,$e7,  // 00C7=>00E7
  $00,$e8,  // 00C8=>00E8
  $00,$e9,  // 00C9=>00E9
  $00,$ea,  // 00CA=>00EA
  $00,$eb,  // 00CB=>00EB
  $00,$ec,  // 00CC=>00EC
  $00,$ed,  // 00CD=>00ED
  $00,$ee,  // 00CE=>00EE
  $00,$ef,  // 00CF=>00EF
  $00,$f0,  // 00D0=>00F0
  $00,$f1,  // 00D1=>00F1
  $00,$f2,  // 00D2=>00F2
  $00,$f3,  // 00D3=>00F3
  $00,$f4,  // 00D4=>00F4
  $00,$f5,  // 00D5=>00F5
  $00,$f6,  // 00D6=>00F6
  $00,$f8,  // 00D8=>00F8
  $00,$f9,  // 00D9=>00F9
  $00,$fa,  // 00DA=>00FA
  $00,$fb,  // 00DB=>00FB
  $00,$fc,  // 00DC=>00FC
  $00,$fd,  // 00DD=>00FD
  $00,$fe,  // 00DE=>00FE
  $01,$01,  // 0100=>0101
  $01,$03,  // 0102=>0103
  $01,$05,  // 0104=>0105
  $01,$07,  // 0106=>0107
  $01,$09,  // 0108=>0109
  $01,$0b,  // 010A=>010B
  $01,$0d,  // 010C=>010D
  $01,$0f,  // 010E=>010F
  $01,$11,  // 0110=>0111
  $01,$13,  // 0112=>0113
  $01,$15,  // 0114=>0115
  $01,$17,  // 0116=>0117
  $01,$19,  // 0118=>0119
  $01,$1b,  // 011A=>011B
  $01,$1d,  // 011C=>011D
  $01,$1f,  // 011E=>011F
  $01,$21,  // 0120=>0121
  $01,$23,  // 0122=>0123
  $01,$25,  // 0124=>0125
  $01,$27,  // 0126=>0127
  $01,$29,  // 0128=>0129
  $01,$2b,  // 012A=>012B
  $01,$2d,  // 012C=>012D
  $01,$2f,  // 012E=>012F
  $00,$69,  // 0130=>0069
  $01,$33,  // 0132=>0133
  $01,$35,  // 0134=>0135
  $01,$37,  // 0136=>0137
  $01,$3a,  // 0139=>013A
  $01,$3c,  // 013B=>013C
  $01,$3e,  // 013D=>013E
  $01,$40,  // 013F=>0140
  $01,$42,  // 0141=>0142
  $01,$44,  // 0143=>0144
  $01,$46,  // 0145=>0146
  $01,$48,  // 0147=>0148
  $01,$4b,  // 014A=>014B
  $01,$4d,  // 014C=>014D
  $01,$4f,  // 014E=>014F
  $01,$51,  // 0150=>0151
  $01,$53,  // 0152=>0153
  $01,$55,  // 0154=>0155
  $01,$57,  // 0156=>0157
  $01,$59,  // 0158=>0159
  $01,$5b,  // 015A=>015B
  $01,$5d,  // 015C=>015D
  $01,$5f,  // 015E=>015F
  $01,$61,  // 0160=>0161
  $01,$63,  // 0162=>0163
  $01,$65,  // 0164=>0165
  $01,$67,  // 0166=>0167
  $01,$69,  // 0168=>0169
  $01,$6b,  // 016A=>016B
  $01,$6d,  // 016C=>016D
  $01,$6f,  // 016E=>016F
  $01,$71,  // 0170=>0171
  $01,$73,  // 0172=>0173
  $01,$75,  // 0174=>0175
  $01,$77,  // 0176=>0177
  $00,$ff,  // 0178=>00FF
  $01,$7a,  // 0179=>017A
  $01,$7c,  // 017B=>017C
  $01,$7e,  // 017D=>017E
  $02,$53,  // 0181=>0253
  $01,$83,  // 0182=>0183
  $01,$85,  // 0184=>0185
  $02,$54,  // 0186=>0254
  $01,$88,  // 0187=>0188
  $02,$56,  // 0189=>0256
  $02,$57,  // 018A=>0257
  $01,$8c,  // 018B=>018C
  $01,$dd,  // 018E=>01DD
  $02,$59,  // 018F=>0259
  $02,$5b,  // 0190=>025B
  $01,$92,  // 0191=>0192
  $02,$60,  // 0193=>0260
  $02,$63,  // 0194=>0263
  $02,$69,  // 0196=>0269
  $02,$68,  // 0197=>0268
  $01,$99,  // 0198=>0199
  $02,$6f,  // 019C=>026F
  $02,$72,  // 019D=>0272
  $02,$75,  // 019F=>0275
  $01,$a1,  // 01A0=>01A1
  $01,$a3,  // 01A2=>01A3
  $01,$a5,  // 01A4=>01A5
  $02,$80,  // 01A6=>0280
  $01,$a8,  // 01A7=>01A8
  $02,$83,  // 01A9=>0283
  $01,$ad,  // 01AC=>01AD
  $02,$88,  // 01AE=>0288
  $01,$b0,  // 01AF=>01B0
  $02,$8a,  // 01B1=>028A
  $02,$8b,  // 01B2=>028B
  $01,$b4,  // 01B3=>01B4
  $01,$b6,  // 01B5=>01B6
  $02,$92,  // 01B7=>0292
  $01,$b9,  // 01B8=>01B9
  $01,$bd,  // 01BC=>01BD
  $01,$c6,  // 01C4=>01C6
  $01,$c6,  // 01C5=>01C6
  $01,$c9,  // 01C7=>01C9
  $01,$c9,  // 01C8=>01C9
  $01,$cc,  // 01CA=>01CC
  $01,$cc,  // 01CB=>01CC
  $01,$ce,  // 01CD=>01CE
  $01,$d0,  // 01CF=>01D0
  $01,$d2,  // 01D1=>01D2
  $01,$d4,  // 01D3=>01D4
  $01,$d6,  // 01D5=>01D6
  $01,$d8,  // 01D7=>01D8
  $01,$da,  // 01D9=>01DA
  $01,$dc,  // 01DB=>01DC
  $01,$df,  // 01DE=>01DF
  $01,$e1,  // 01E0=>01E1
  $01,$e3,  // 01E2=>01E3
  $01,$e5,  // 01E4=>01E5
  $01,$e7,  // 01E6=>01E7
  $01,$e9,  // 01E8=>01E9
  $01,$eb,  // 01EA=>01EB
  $01,$ed,  // 01EC=>01ED
  $01,$ef,  // 01EE=>01EF
  $01,$f3,  // 01F1=>01F3
  $01,$f3,  // 01F2=>01F3
  $01,$f5,  // 01F4=>01F5
  $01,$95,  // 01F6=>0195
  $01,$bf,  // 01F7=>01BF
  $01,$f9,  // 01F8=>01F9
  $01,$fb,  // 01FA=>01FB
  $01,$fd,  // 01FC=>01FD
  $01,$ff,  // 01FE=>01FF
  $02,$01,  // 0200=>0201
  $02,$03,  // 0202=>0203
  $02,$05,  // 0204=>0205
  $02,$07,  // 0206=>0207
  $02,$09,  // 0208=>0209
  $02,$0b,  // 020A=>020B
  $02,$0d,  // 020C=>020D
  $02,$0f,  // 020E=>020F
  $02,$11,  // 0210=>0211
  $02,$13,  // 0212=>0213
  $02,$15,  // 0214=>0215
  $02,$17,  // 0216=>0217
  $02,$19,  // 0218=>0219
  $02,$1b,  // 021A=>021B
  $02,$1d,  // 021C=>021D
  $02,$1f,  // 021E=>021F
  $01,$9e,  // 0220=>019E
  $02,$23,  // 0222=>0223
  $02,$25,  // 0224=>0225
  $02,$27,  // 0226=>0227
  $02,$29,  // 0228=>0229
  $02,$2b,  // 022A=>022B
  $02,$2d,  // 022C=>022D
  $02,$2f,  // 022E=>022F
  $02,$31,  // 0230=>0231
  $02,$33,  // 0232=>0233
  $02,$3c,  // 023B=>023C
  $01,$9a,  // 023D=>019A
  $02,$94,  // 0241=>0294
  $03,$ac,  // 0386=>03AC
  $03,$ad,  // 0388=>03AD
  $03,$ae,  // 0389=>03AE
  $03,$af,  // 038A=>03AF
  $03,$cc,  // 038C=>03CC
  $03,$cd,  // 038E=>03CD
  $03,$ce,  // 038F=>03CE
  $03,$b1,  // 0391=>03B1
  $03,$b2,  // 0392=>03B2
  $03,$b3,  // 0393=>03B3
  $03,$b4,  // 0394=>03B4
  $03,$b5,  // 0395=>03B5
  $03,$b6,  // 0396=>03B6
  $03,$b7,  // 0397=>03B7
  $03,$b8,  // 0398=>03B8
  $03,$b9,  // 0399=>03B9
  $03,$ba,  // 039A=>03BA
  $03,$bb,  // 039B=>03BB
  $03,$bc,  // 039C=>03BC
  $03,$bd,  // 039D=>03BD
  $03,$be,  // 039E=>03BE
  $03,$bf,  // 039F=>03BF
  $03,$c0,  // 03A0=>03C0
  $03,$c1,  // 03A1=>03C1
  $03,$c3,  // 03A3=>03C3
  $03,$c4,  // 03A4=>03C4
  $03,$c5,  // 03A5=>03C5
  $03,$c6,  // 03A6=>03C6
  $03,$c7,  // 03A7=>03C7
  $03,$c8,  // 03A8=>03C8
  $03,$c9,  // 03A9=>03C9
  $03,$ca,  // 03AA=>03CA
  $03,$cb,  // 03AB=>03CB
  $03,$d9,  // 03D8=>03D9
  $03,$db,  // 03DA=>03DB
  $03,$dd,  // 03DC=>03DD
  $03,$df,  // 03DE=>03DF
  $03,$e1,  // 03E0=>03E1
  $03,$e3,  // 03E2=>03E3
  $03,$e5,  // 03E4=>03E5
  $03,$e7,  // 03E6=>03E7
  $03,$e9,  // 03E8=>03E9
  $03,$eb,  // 03EA=>03EB
  $03,$ed,  // 03EC=>03ED
  $03,$ef,  // 03EE=>03EF
  $03,$b8,  // 03F4=>03B8
  $03,$f8,  // 03F7=>03F8
  $03,$f2,  // 03F9=>03F2
  $03,$fb,  // 03FA=>03FB
  $04,$50,  // 0400=>0450
  $04,$51,  // 0401=>0451
  $04,$52,  // 0402=>0452
  $04,$53,  // 0403=>0453
  $04,$54,  // 0404=>0454
  $04,$55,  // 0405=>0455
  $04,$56,  // 0406=>0456
  $04,$57,  // 0407=>0457
  $04,$58,  // 0408=>0458
  $04,$59,  // 0409=>0459
  $04,$5a,  // 040A=>045A
  $04,$5b,  // 040B=>045B
  $04,$5c,  // 040C=>045C
  $04,$5d,  // 040D=>045D
  $04,$5e,  // 040E=>045E
  $04,$5f,  // 040F=>045F
  $04,$30,  // 0410=>0430
  $04,$31,  // 0411=>0431
  $04,$32,  // 0412=>0432
  $04,$33,  // 0413=>0433
  $04,$34,  // 0414=>0434
  $04,$35,  // 0415=>0435
  $04,$36,  // 0416=>0436
  $04,$37,  // 0417=>0437
  $04,$38,  // 0418=>0438
  $04,$39,  // 0419=>0439
  $04,$3a,  // 041A=>043A
  $04,$3b,  // 041B=>043B
  $04,$3c,  // 041C=>043C
  $04,$3d,  // 041D=>043D
  $04,$3e,  // 041E=>043E
  $04,$3f,  // 041F=>043F
  $04,$40,  // 0420=>0440
  $04,$41,  // 0421=>0441
  $04,$42,  // 0422=>0442
  $04,$43,  // 0423=>0443
  $04,$44,  // 0424=>0444
  $04,$45,  // 0425=>0445
  $04,$46,  // 0426=>0446
  $04,$47,  // 0427=>0447
  $04,$48,  // 0428=>0448
  $04,$49,  // 0429=>0449
  $04,$4a,  // 042A=>044A
  $04,$4b,  // 042B=>044B
  $04,$4c,  // 042C=>044C
  $04,$4d,  // 042D=>044D
  $04,$4e,  // 042E=>044E
  $04,$4f,  // 042F=>044F
  $04,$61,  // 0460=>0461
  $04,$63,  // 0462=>0463
  $04,$65,  // 0464=>0465
  $04,$67,  // 0466=>0467
  $04,$69,  // 0468=>0469
  $04,$6b,  // 046A=>046B
  $04,$6d,  // 046C=>046D
  $04,$6f,  // 046E=>046F
  $04,$71,  // 0470=>0471
  $04,$73,  // 0472=>0473
  $04,$75,  // 0474=>0475
  $04,$77,  // 0476=>0477
  $04,$79,  // 0478=>0479
  $04,$7b,  // 047A=>047B
  $04,$7d,  // 047C=>047D
  $04,$7f,  // 047E=>047F
  $04,$81,  // 0480=>0481
  $04,$8b,  // 048A=>048B
  $04,$8d,  // 048C=>048D
  $04,$8f,  // 048E=>048F
  $04,$91,  // 0490=>0491
  $04,$93,  // 0492=>0493
  $04,$95,  // 0494=>0495
  $04,$97,  // 0496=>0497
  $04,$99,  // 0498=>0499
  $04,$9b,  // 049A=>049B
  $04,$9d,  // 049C=>049D
  $04,$9f,  // 049E=>049F
  $04,$a1,  // 04A0=>04A1
  $04,$a3,  // 04A2=>04A3
  $04,$a5,  // 04A4=>04A5
  $04,$a7,  // 04A6=>04A7
  $04,$a9,  // 04A8=>04A9
  $04,$ab,  // 04AA=>04AB
  $04,$ad,  // 04AC=>04AD
  $04,$af,  // 04AE=>04AF
  $04,$b1,  // 04B0=>04B1
  $04,$b3,  // 04B2=>04B3
  $04,$b5,  // 04B4=>04B5
  $04,$b7,  // 04B6=>04B7
  $04,$b9,  // 04B8=>04B9
  $04,$bb,  // 04BA=>04BB
  $04,$bd,  // 04BC=>04BD
  $04,$bf,  // 04BE=>04BF
  $04,$c2,  // 04C1=>04C2
  $04,$c4,  // 04C3=>04C4
  $04,$c6,  // 04C5=>04C6
  $04,$c8,  // 04C7=>04C8
  $04,$ca,  // 04C9=>04CA
  $04,$cc,  // 04CB=>04CC
  $04,$ce,  // 04CD=>04CE
  $04,$d1,  // 04D0=>04D1
  $04,$d3,  // 04D2=>04D3
  $04,$d5,  // 04D4=>04D5
  $04,$d7,  // 04D6=>04D7
  $04,$d9,  // 04D8=>04D9
  $04,$db,  // 04DA=>04DB
  $04,$dd,  // 04DC=>04DD
  $04,$df,  // 04DE=>04DF
  $04,$e1,  // 04E0=>04E1
  $04,$e3,  // 04E2=>04E3
  $04,$e5,  // 04E4=>04E5
  $04,$e7,  // 04E6=>04E7
  $04,$e9,  // 04E8=>04E9
  $04,$eb,  // 04EA=>04EB
  $04,$ed,  // 04EC=>04ED
  $04,$ef,  // 04EE=>04EF
  $04,$f1,  // 04F0=>04F1
  $04,$f3,  // 04F2=>04F3
  $04,$f5,  // 04F4=>04F5
  $04,$f7,  // 04F6=>04F7
  $04,$f9,  // 04F8=>04F9
  $05,$01,  // 0500=>0501
  $05,$03,  // 0502=>0503
  $05,$05,  // 0504=>0505
  $05,$07,  // 0506=>0507
  $05,$09,  // 0508=>0509
  $05,$0b,  // 050A=>050B
  $05,$0d,  // 050C=>050D
  $05,$0f,  // 050E=>050F
  $05,$61,  // 0531=>0561
  $05,$62,  // 0532=>0562
  $05,$63,  // 0533=>0563
  $05,$64,  // 0534=>0564
  $05,$65,  // 0535=>0565
  $05,$66,  // 0536=>0566
  $05,$67,  // 0537=>0567
  $05,$68,  // 0538=>0568
  $05,$69,  // 0539=>0569
  $05,$6a,  // 053A=>056A
  $05,$6b,  // 053B=>056B
  $05,$6c,  // 053C=>056C
  $05,$6d,  // 053D=>056D
  $05,$6e,  // 053E=>056E
  $05,$6f,  // 053F=>056F
  $05,$70,  // 0540=>0570
  $05,$71,  // 0541=>0571
  $05,$72,  // 0542=>0572
  $05,$73,  // 0543=>0573
  $05,$74,  // 0544=>0574
  $05,$75,  // 0545=>0575
  $05,$76,  // 0546=>0576
  $05,$77,  // 0547=>0577
  $05,$78,  // 0548=>0578
  $05,$79,  // 0549=>0579
  $05,$7a,  // 054A=>057A
  $05,$7b,  // 054B=>057B
  $05,$7c,  // 054C=>057C
  $05,$7d,  // 054D=>057D
  $05,$7e,  // 054E=>057E
  $05,$7f,  // 054F=>057F
  $05,$80,  // 0550=>0580
  $05,$81,  // 0551=>0581
  $05,$82,  // 0552=>0582
  $05,$83,  // 0553=>0583
  $05,$84,  // 0554=>0584
  $05,$85,  // 0555=>0585
  $05,$86,  // 0556=>0586
  $2d,$00,  // 10A0=>2D00
  $2d,$01,  // 10A1=>2D01
  $2d,$02,  // 10A2=>2D02
  $2d,$03,  // 10A3=>2D03
  $2d,$04,  // 10A4=>2D04
  $2d,$05,  // 10A5=>2D05
  $2d,$06,  // 10A6=>2D06
  $2d,$07,  // 10A7=>2D07
  $2d,$08,  // 10A8=>2D08
  $2d,$09,  // 10A9=>2D09
  $2d,$0a,  // 10AA=>2D0A
  $2d,$0b,  // 10AB=>2D0B
  $2d,$0c,  // 10AC=>2D0C
  $2d,$0d,  // 10AD=>2D0D
  $2d,$0e,  // 10AE=>2D0E
  $2d,$0f,  // 10AF=>2D0F
  $2d,$10,  // 10B0=>2D10
  $2d,$11,  // 10B1=>2D11
  $2d,$12,  // 10B2=>2D12
  $2d,$13,  // 10B3=>2D13
  $2d,$14,  // 10B4=>2D14
  $2d,$15,  // 10B5=>2D15
  $2d,$16,  // 10B6=>2D16
  $2d,$17,  // 10B7=>2D17
  $2d,$18,  // 10B8=>2D18
  $2d,$19,  // 10B9=>2D19
  $2d,$1a,  // 10BA=>2D1A
  $2d,$1b,  // 10BB=>2D1B
  $2d,$1c,  // 10BC=>2D1C
  $2d,$1d,  // 10BD=>2D1D
  $2d,$1e,  // 10BE=>2D1E
  $2d,$1f,  // 10BF=>2D1F
  $2d,$20,  // 10C0=>2D20
  $2d,$21,  // 10C1=>2D21
  $2d,$22,  // 10C2=>2D22
  $2d,$23,  // 10C3=>2D23
  $2d,$24,  // 10C4=>2D24
  $2d,$25,  // 10C5=>2D25
  $1e,$01,  // 1E00=>1E01
  $1e,$03,  // 1E02=>1E03
  $1e,$05,  // 1E04=>1E05
  $1e,$07,  // 1E06=>1E07
  $1e,$09,  // 1E08=>1E09
  $1e,$0b,  // 1E0A=>1E0B
  $1e,$0d,  // 1E0C=>1E0D
  $1e,$0f,  // 1E0E=>1E0F
  $1e,$11,  // 1E10=>1E11
  $1e,$13,  // 1E12=>1E13
  $1e,$15,  // 1E14=>1E15
  $1e,$17,  // 1E16=>1E17
  $1e,$19,  // 1E18=>1E19
  $1e,$1b,  // 1E1A=>1E1B
  $1e,$1d,  // 1E1C=>1E1D
  $1e,$1f,  // 1E1E=>1E1F
  $1e,$21,  // 1E20=>1E21
  $1e,$23,  // 1E22=>1E23
  $1e,$25,  // 1E24=>1E25
  $1e,$27,  // 1E26=>1E27
  $1e,$29,  // 1E28=>1E29
  $1e,$2b,  // 1E2A=>1E2B
  $1e,$2d,  // 1E2C=>1E2D
  $1e,$2f,  // 1E2E=>1E2F
  $1e,$31,  // 1E30=>1E31
  $1e,$33,  // 1E32=>1E33
  $1e,$35,  // 1E34=>1E35
  $1e,$37,  // 1E36=>1E37
  $1e,$39,  // 1E38=>1E39
  $1e,$3b,  // 1E3A=>1E3B
  $1e,$3d,  // 1E3C=>1E3D
  $1e,$3f,  // 1E3E=>1E3F
  $1e,$41,  // 1E40=>1E41
  $1e,$43,  // 1E42=>1E43
  $1e,$45,  // 1E44=>1E45
  $1e,$47,  // 1E46=>1E47
  $1e,$49,  // 1E48=>1E49
  $1e,$4b,  // 1E4A=>1E4B
  $1e,$4d,  // 1E4C=>1E4D
  $1e,$4f,  // 1E4E=>1E4F
  $1e,$51,  // 1E50=>1E51
  $1e,$53,  // 1E52=>1E53
  $1e,$55,  // 1E54=>1E55
  $1e,$57,  // 1E56=>1E57
  $1e,$59,  // 1E58=>1E59
  $1e,$5b,  // 1E5A=>1E5B
  $1e,$5d,  // 1E5C=>1E5D
  $1e,$5f,  // 1E5E=>1E5F
  $1e,$61,  // 1E60=>1E61
  $1e,$63,  // 1E62=>1E63
  $1e,$65,  // 1E64=>1E65
  $1e,$67,  // 1E66=>1E67
  $1e,$69,  // 1E68=>1E69
  $1e,$6b,  // 1E6A=>1E6B
  $1e,$6d,  // 1E6C=>1E6D
  $1e,$6f,  // 1E6E=>1E6F
  $1e,$71,  // 1E70=>1E71
  $1e,$73,  // 1E72=>1E73
  $1e,$75,  // 1E74=>1E75
  $1e,$77,  // 1E76=>1E77
  $1e,$79,  // 1E78=>1E79
  $1e,$7b,  // 1E7A=>1E7B
  $1e,$7d,  // 1E7C=>1E7D
  $1e,$7f,  // 1E7E=>1E7F
  $1e,$81,  // 1E80=>1E81
  $1e,$83,  // 1E82=>1E83
  $1e,$85,  // 1E84=>1E85
  $1e,$87,  // 1E86=>1E87
  $1e,$89,  // 1E88=>1E89
  $1e,$8b,  // 1E8A=>1E8B
  $1e,$8d,  // 1E8C=>1E8D
  $1e,$8f,  // 1E8E=>1E8F
  $1e,$91,  // 1E90=>1E91
  $1e,$93,  // 1E92=>1E93
  $1e,$95,  // 1E94=>1E95
  $1e,$a1,  // 1EA0=>1EA1
  $1e,$a3,  // 1EA2=>1EA3
  $1e,$a5,  // 1EA4=>1EA5
  $1e,$a7,  // 1EA6=>1EA7
  $1e,$a9,  // 1EA8=>1EA9
  $1e,$ab,  // 1EAA=>1EAB
  $1e,$ad,  // 1EAC=>1EAD
  $1e,$af,  // 1EAE=>1EAF
  $1e,$b1,  // 1EB0=>1EB1
  $1e,$b3,  // 1EB2=>1EB3
  $1e,$b5,  // 1EB4=>1EB5
  $1e,$b7,  // 1EB6=>1EB7
  $1e,$b9,  // 1EB8=>1EB9
  $1e,$bb,  // 1EBA=>1EBB
  $1e,$bd,  // 1EBC=>1EBD
  $1e,$bf,  // 1EBE=>1EBF
  $1e,$c1,  // 1EC0=>1EC1
  $1e,$c3,  // 1EC2=>1EC3
  $1e,$c5,  // 1EC4=>1EC5
  $1e,$c7,  // 1EC6=>1EC7
  $1e,$c9,  // 1EC8=>1EC9
  $1e,$cb,  // 1ECA=>1ECB
  $1e,$cd,  // 1ECC=>1ECD
  $1e,$cf,  // 1ECE=>1ECF
  $1e,$d1,  // 1ED0=>1ED1
  $1e,$d3,  // 1ED2=>1ED3
  $1e,$d5,  // 1ED4=>1ED5
  $1e,$d7,  // 1ED6=>1ED7
  $1e,$d9,  // 1ED8=>1ED9
  $1e,$db,  // 1EDA=>1EDB
  $1e,$dd,  // 1EDC=>1EDD
  $1e,$df,  // 1EDE=>1EDF
  $1e,$e1,  // 1EE0=>1EE1
  $1e,$e3,  // 1EE2=>1EE3
  $1e,$e5,  // 1EE4=>1EE5
  $1e,$e7,  // 1EE6=>1EE7
  $1e,$e9,  // 1EE8=>1EE9
  $1e,$eb,  // 1EEA=>1EEB
  $1e,$ed,  // 1EEC=>1EED
  $1e,$ef,  // 1EEE=>1EEF
  $1e,$f1,  // 1EF0=>1EF1
  $1e,$f3,  // 1EF2=>1EF3
  $1e,$f5,  // 1EF4=>1EF5
  $1e,$f7,  // 1EF6=>1EF7
  $1e,$f9,  // 1EF8=>1EF9
  $1f,$00,  // 1F08=>1F00
  $1f,$01,  // 1F09=>1F01
  $1f,$02,  // 1F0A=>1F02
  $1f,$03,  // 1F0B=>1F03
  $1f,$04,  // 1F0C=>1F04
  $1f,$05,  // 1F0D=>1F05
  $1f,$06,  // 1F0E=>1F06
  $1f,$07,  // 1F0F=>1F07
  $1f,$10,  // 1F18=>1F10
  $1f,$11,  // 1F19=>1F11
  $1f,$12,  // 1F1A=>1F12
  $1f,$13,  // 1F1B=>1F13
  $1f,$14,  // 1F1C=>1F14
  $1f,$15,  // 1F1D=>1F15
  $1f,$20,  // 1F28=>1F20
  $1f,$21,  // 1F29=>1F21
  $1f,$22,  // 1F2A=>1F22
  $1f,$23,  // 1F2B=>1F23
  $1f,$24,  // 1F2C=>1F24
  $1f,$25,  // 1F2D=>1F25
  $1f,$26,  // 1F2E=>1F26
  $1f,$27,  // 1F2F=>1F27
  $1f,$30,  // 1F38=>1F30
  $1f,$31,  // 1F39=>1F31
  $1f,$32,  // 1F3A=>1F32
  $1f,$33,  // 1F3B=>1F33
  $1f,$34,  // 1F3C=>1F34
  $1f,$35,  // 1F3D=>1F35
  $1f,$36,  // 1F3E=>1F36
  $1f,$37,  // 1F3F=>1F37
  $1f,$40,  // 1F48=>1F40
  $1f,$41,  // 1F49=>1F41
  $1f,$42,  // 1F4A=>1F42
  $1f,$43,  // 1F4B=>1F43
  $1f,$44,  // 1F4C=>1F44
  $1f,$45,  // 1F4D=>1F45
  $1f,$51,  // 1F59=>1F51
  $1f,$53,  // 1F5B=>1F53
  $1f,$55,  // 1F5D=>1F55
  $1f,$57,  // 1F5F=>1F57
  $1f,$60,  // 1F68=>1F60
  $1f,$61,  // 1F69=>1F61
  $1f,$62,  // 1F6A=>1F62
  $1f,$63,  // 1F6B=>1F63
  $1f,$64,  // 1F6C=>1F64
  $1f,$65,  // 1F6D=>1F65
  $1f,$66,  // 1F6E=>1F66
  $1f,$67,  // 1F6F=>1F67
  $1f,$80,  // 1F88=>1F80
  $1f,$81,  // 1F89=>1F81
  $1f,$82,  // 1F8A=>1F82
  $1f,$83,  // 1F8B=>1F83
  $1f,$84,  // 1F8C=>1F84
  $1f,$85,  // 1F8D=>1F85
  $1f,$86,  // 1F8E=>1F86
  $1f,$87,  // 1F8F=>1F87
  $1f,$90,  // 1F98=>1F90
  $1f,$91,  // 1F99=>1F91
  $1f,$92,  // 1F9A=>1F92
  $1f,$93,  // 1F9B=>1F93
  $1f,$94,  // 1F9C=>1F94
  $1f,$95,  // 1F9D=>1F95
  $1f,$96,  // 1F9E=>1F96
  $1f,$97,  // 1F9F=>1F97
  $1f,$a0,  // 1FA8=>1FA0
  $1f,$a1,  // 1FA9=>1FA1
  $1f,$a2,  // 1FAA=>1FA2
  $1f,$a3,  // 1FAB=>1FA3
  $1f,$a4,  // 1FAC=>1FA4
  $1f,$a5,  // 1FAD=>1FA5
  $1f,$a6,  // 1FAE=>1FA6
  $1f,$a7,  // 1FAF=>1FA7
  $1f,$b0,  // 1FB8=>1FB0
  $1f,$b1,  // 1FB9=>1FB1
  $1f,$70,  // 1FBA=>1F70
  $1f,$71,  // 1FBB=>1F71
  $1f,$b3,  // 1FBC=>1FB3
  $1f,$72,  // 1FC8=>1F72
  $1f,$73,  // 1FC9=>1F73
  $1f,$74,  // 1FCA=>1F74
  $1f,$75,  // 1FCB=>1F75
  $1f,$c3,  // 1FCC=>1FC3
  $1f,$d0,  // 1FD8=>1FD0
  $1f,$d1,  // 1FD9=>1FD1
  $1f,$76,  // 1FDA=>1F76
  $1f,$77,  // 1FDB=>1F77
  $1f,$e0,  // 1FE8=>1FE0
  $1f,$e1,  // 1FE9=>1FE1
  $1f,$7a,  // 1FEA=>1F7A
  $1f,$7b,  // 1FEB=>1F7B
  $1f,$e5,  // 1FEC=>1FE5
  $1f,$78,  // 1FF8=>1F78
  $1f,$79,  // 1FF9=>1F79
  $1f,$7c,  // 1FFA=>1F7C
  $1f,$7d,  // 1FFB=>1F7D
  $1f,$f3,  // 1FFC=>1FF3
  $03,$c9,  // 2126=>03C9
  $00,$6b,  // 212A=>006B
  $00,$e5,  // 212B=>00E5
  $21,$70,  // 2160=>2170
  $21,$71,  // 2161=>2171
  $21,$72,  // 2162=>2172
  $21,$73,  // 2163=>2173
  $21,$74,  // 2164=>2174
  $21,$75,  // 2165=>2175
  $21,$76,  // 2166=>2176
  $21,$77,  // 2167=>2177
  $21,$78,  // 2168=>2178
  $21,$79,  // 2169=>2179
  $21,$7a,  // 216A=>217A
  $21,$7b,  // 216B=>217B
  $21,$7c,  // 216C=>217C
  $21,$7d,  // 216D=>217D
  $21,$7e,  // 216E=>217E
  $21,$7f,  // 216F=>217F
  $24,$d0,  // 24B6=>24D0
  $24,$d1,  // 24B7=>24D1
  $24,$d2,  // 24B8=>24D2
  $24,$d3,  // 24B9=>24D3
  $24,$d4,  // 24BA=>24D4
  $24,$d5,  // 24BB=>24D5
  $24,$d6,  // 24BC=>24D6
  $24,$d7,  // 24BD=>24D7
  $24,$d8,  // 24BE=>24D8
  $24,$d9,  // 24BF=>24D9
  $24,$da,  // 24C0=>24DA
  $24,$db,  // 24C1=>24DB
  $24,$dc,  // 24C2=>24DC
  $24,$dd,  // 24C3=>24DD
  $24,$de,  // 24C4=>24DE
  $24,$df,  // 24C5=>24DF
  $24,$e0,  // 24C6=>24E0
  $24,$e1,  // 24C7=>24E1
  $24,$e2,  // 24C8=>24E2
  $24,$e3,  // 24C9=>24E3
  $24,$e4,  // 24CA=>24E4
  $24,$e5,  // 24CB=>24E5
  $24,$e6,  // 24CC=>24E6
  $24,$e7,  // 24CD=>24E7
  $24,$e8,  // 24CE=>24E8
  $24,$e9,  // 24CF=>24E9
  $2c,$30,  // 2C00=>2C30
  $2c,$31,  // 2C01=>2C31
  $2c,$32,  // 2C02=>2C32
  $2c,$33,  // 2C03=>2C33
  $2c,$34,  // 2C04=>2C34
  $2c,$35,  // 2C05=>2C35
  $2c,$36,  // 2C06=>2C36
  $2c,$37,  // 2C07=>2C37
  $2c,$38,  // 2C08=>2C38
  $2c,$39,  // 2C09=>2C39
  $2c,$3a,  // 2C0A=>2C3A
  $2c,$3b,  // 2C0B=>2C3B
  $2c,$3c,  // 2C0C=>2C3C
  $2c,$3d,  // 2C0D=>2C3D
  $2c,$3e,  // 2C0E=>2C3E
  $2c,$3f,  // 2C0F=>2C3F
  $2c,$40,  // 2C10=>2C40
  $2c,$41,  // 2C11=>2C41
  $2c,$42,  // 2C12=>2C42
  $2c,$43,  // 2C13=>2C43
  $2c,$44,  // 2C14=>2C44
  $2c,$45,  // 2C15=>2C45
  $2c,$46,  // 2C16=>2C46
  $2c,$47,  // 2C17=>2C47
  $2c,$48,  // 2C18=>2C48
  $2c,$49,  // 2C19=>2C49
  $2c,$4a,  // 2C1A=>2C4A
  $2c,$4b,  // 2C1B=>2C4B
  $2c,$4c,  // 2C1C=>2C4C
  $2c,$4d,  // 2C1D=>2C4D
  $2c,$4e,  // 2C1E=>2C4E
  $2c,$4f,  // 2C1F=>2C4F
  $2c,$50,  // 2C20=>2C50
  $2c,$51,  // 2C21=>2C51
  $2c,$52,  // 2C22=>2C52
  $2c,$53,  // 2C23=>2C53
  $2c,$54,  // 2C24=>2C54
  $2c,$55,  // 2C25=>2C55
  $2c,$56,  // 2C26=>2C56
  $2c,$57,  // 2C27=>2C57
  $2c,$58,  // 2C28=>2C58
  $2c,$59,  // 2C29=>2C59
  $2c,$5a,  // 2C2A=>2C5A
  $2c,$5b,  // 2C2B=>2C5B
  $2c,$5c,  // 2C2C=>2C5C
  $2c,$5d,  // 2C2D=>2C5D
  $2c,$5e,  // 2C2E=>2C5E
  $2c,$81,  // 2C80=>2C81
  $2c,$83,  // 2C82=>2C83
  $2c,$85,  // 2C84=>2C85
  $2c,$87,  // 2C86=>2C87
  $2c,$89,  // 2C88=>2C89
  $2c,$8b,  // 2C8A=>2C8B
  $2c,$8d,  // 2C8C=>2C8D
  $2c,$8f,  // 2C8E=>2C8F
  $2c,$91,  // 2C90=>2C91
  $2c,$93,  // 2C92=>2C93
  $2c,$95,  // 2C94=>2C95
  $2c,$97,  // 2C96=>2C97
  $2c,$99,  // 2C98=>2C99
  $2c,$9b,  // 2C9A=>2C9B
  $2c,$9d,  // 2C9C=>2C9D
  $2c,$9f,  // 2C9E=>2C9F
  $2c,$a1,  // 2CA0=>2CA1
  $2c,$a3,  // 2CA2=>2CA3
  $2c,$a5,  // 2CA4=>2CA5
  $2c,$a7,  // 2CA6=>2CA7
  $2c,$a9,  // 2CA8=>2CA9
  $2c,$ab,  // 2CAA=>2CAB
  $2c,$ad,  // 2CAC=>2CAD
  $2c,$af,  // 2CAE=>2CAF
  $2c,$b1,  // 2CB0=>2CB1
  $2c,$b3,  // 2CB2=>2CB3
  $2c,$b5,  // 2CB4=>2CB5
  $2c,$b7,  // 2CB6=>2CB7
  $2c,$b9,  // 2CB8=>2CB9
  $2c,$bb,  // 2CBA=>2CBB
  $2c,$bd,  // 2CBC=>2CBD
  $2c,$bf,  // 2CBE=>2CBF
  $2c,$c1,  // 2CC0=>2CC1
  $2c,$c3,  // 2CC2=>2CC3
  $2c,$c5,  // 2CC4=>2CC5
  $2c,$c7,  // 2CC6=>2CC7
  $2c,$c9,  // 2CC8=>2CC9
  $2c,$cb,  // 2CCA=>2CCB
  $2c,$cd,  // 2CCC=>2CCD
  $2c,$cf,  // 2CCE=>2CCF
  $2c,$d1,  // 2CD0=>2CD1
  $2c,$d3,  // 2CD2=>2CD3
  $2c,$d5,  // 2CD4=>2CD5
  $2c,$d7,  // 2CD6=>2CD7
  $2c,$d9,  // 2CD8=>2CD9
  $2c,$db,  // 2CDA=>2CDB
  $2c,$dd,  // 2CDC=>2CDD
  $2c,$df,  // 2CDE=>2CDF
  $2c,$e1,  // 2CE0=>2CE1
  $2c,$e3,  // 2CE2=>2CE3
  $ff,$41,  // FF21=>FF41
  $ff,$42,  // FF22=>FF42
  $ff,$43,  // FF23=>FF43
  $ff,$44,  // FF24=>FF44
  $ff,$45,  // FF25=>FF45
  $ff,$46,  // FF26=>FF46
  $ff,$47,  // FF27=>FF47
  $ff,$48,  // FF28=>FF48
  $ff,$49,  // FF29=>FF49
  $ff,$4a,  // FF2A=>FF4A
  $ff,$4b,  // FF2B=>FF4B
  $ff,$4c,  // FF2C=>FF4C
  $ff,$4d,  // FF2D=>FF4D
  $ff,$4e,  // FF2E=>FF4E
  $ff,$4f,  // FF2F=>FF4F
  $ff,$50,  // FF30=>FF50
  $ff,$51,  // FF31=>FF51
  $ff,$52,  // FF32=>FF52
  $ff,$53,  // FF33=>FF53
  $ff,$54,  // FF34=>FF54
  $ff,$55,  // FF35=>FF55
  $ff,$56,  // FF36=>FF56
  $ff,$57,  // FF37=>FF57
  $ff,$58,  // FF38=>FF58
  $ff,$59,  // FF39=>FF59
  $ff,$5a   // FF3A=>FF5A
}
// UnicodeData.txt End

(***********************************************************)
(*        SUBROUTINE/FUNCTION DEFINITIONS GO BELOW         *)
(***********************************************************)

(********************************************)
(* Call Name: WC_ENCODE                     *)
(* Function:  Encode Unicode into a format  *)
(********************************************)
DEFINE_FUNCTION CHAR[WC_MAX_STRING_SIZE*2] WC_ENCODE(WIDECHAR wcData[], INTEGER nFormat, LONG lPos)
STACK_VAR
CHAR cOut[WC_MAX_STRING_SIZE*2]
INTEGER nChar
CHAR chByte1
CHAR chByte2
CHAR chByte3
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_ENCODE_INT(wcData, nFormat, lPos);

  // Sanity
  IF (lPos == 0)
    RETURN "";

  SELECT
  {
    // Add 0xEF 0xBB 0xBF (UTF-8 Format)
    ACTIVE (nFormat == WC_FORMAT_UTF8):
    {
      FOR (; lPos <= LENGTH_ARRAY(wcData); lPos++)
      {
        nChar = wcData[lPos]
        SELECT
        {
          // 0-0x7F (2^7), encode as 1 byte
          // 0x0001 -> 0x01
          // 0x007F -> 0x7F
          ACTIVE (nChar <= $7F):
            cOut =  "cOut,nChar"

          // 0x80-0x7FF (2^11), encode as 2 bytes
          // 0x0080 -> 0xC2 0x80
          // 0x07FF -> 0xDF 0xBF
          ACTIVE (nChar <= $7FF):
          {
            chByte1 = TYPE_CAST($C0 + (nChar >> 6)) // Get bits above 6, up to 5 bits (110xxxxx)
            chByte2 = TYPE_CAST($80 + (nChar & $3F)) // Use 6 bits only, set hi bit     (10xxxxxx)
            cOut =  "cOut,chByte1,chByte2"
          }

          // 0x800-0xFFFF (2^16), encode as 3 bytes
          // 0x0800 -> 0xE0 0xA0 0x80
          // 0xFFFF -> 0xEF 0xBF 0xBF
          ACTIVE (1):
          {
            chByte1 = TYPE_CAST($C0 + (nChar >> 12)) // Get bits above 12, up to 4 bits  (1110xxxx)
            chByte2 = TYPE_CAST($80 + ((nChar >> 6) & $3F)) // Use 6 bits only, set hi bit (10xxxxxx)
            chByte3 = TYPE_CAST($80 + (nChar & $3F)) // Use 6 bits only, set hi bit        (10xxxxxx)
            cOut =  "cOut,chByte1,chByte2,chByte3"
          }
        }
      }
    }

    // Add 0xFEFF in LE format (Unicode Format)
    ACTIVE (nFormat == WC_FORMAT_UNICODE):
    {
      // Easy: the marshiling do it for us
      VARIABLE_TO_STRING(wcData,cOut,1)
      GET_BUFFER_STRING(cOut,3)
      IF (lPos > 1)
        GET_BUFFER_STRING(cOut,(lPos-1)*2)
    }

    // Add 0xFEFF in BE format (Unicode Format)
    ACTIVE (nFormat == WC_FORMAT_UNICODE_BE):
    {
      FOR (; lPos <= LENGTH_ARRAY(wcData); lPos++)
      {
        nChar = wcData[lPos]
        cOut =  "cOut,RAW_BE(nChar)"
      }
    }

    // TP format - ASCII hex encoded
    ACTIVE (nFormat == WC_FORMAT_TP):
    {
      // Turn every word into 4 ADCII/HEX chars, BE, Upper Case!
      // 0x7FFF -> '7FFF'
      FOR (; lPos <= LENGTH_ARRAY(wcData); lPos++)
        cOut =  "cOut,FORMAT('%04X',wcData[lPos])"
    }

    // Active - Unknown or ascii
    ACTIVE (1):
      cOut = WC_TO_CH(wcData)
  }

  // Done
  RETURN cOut;
}

(********************************************)
(* Call Name: WC_DECODE                     *)
(* Function:  Decode Unicode from a format  *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_DECODE(CHAR cData[], INTEGER nFormat, LONG lPos)
STACK_VAR
INTEGER nChar
CHAR cFormat[3]
LONG lCharsOut
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
INTEGER nLengthHi
INTEGER nLengthLo
CHAR cTemp[WC_MAX_STRING_SIZE*2]
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN WC_DECODE(cData, nFormat, lPos);

  // Sanity
  IF (lPos == 0)
    RETURN wcOut;

  // Now, decode the bytes
  SELECT
  {
    // Add bytes in UTF-8 Format
    ACTIVE (nFormat == WC_FORMAT_UTF8):
    {
      FOR (lCharsOut = 1; lPos <= LENGTH_ARRAY(cData); lCharsOut++, lPos++)
      {
        nChar = cData[lPos]
        SELECT
        {
          // 0-0x7F (2^7), encode as 1 byte
          // 0x01 -> 0x0001
          // 0x7F -> 0x007F
          ACTIVE (nChar <= $7F):
            wcOut[lCharsOut] = TYPE_CAST(nChar)

          // 0x80-0x7FF (2^11), encode as 2 bytes
          // 0xC2 0x80 -> 0x0080
          // 0xDF 0xBF -> 0x07FF
          ACTIVE (nChar <= $DF):
          {
            if (lPos+1<=LENGTH_ARRAY(cData)) 
	    {
		nChar = TYPE_CAST(nChar & $1F) // grab lower 5 bits (110xxxxx)
		nChar = TYPE_CAST(nChar << 6) // shift those 5 bits up leaving room for 6 more bits
		nChar = nChar + TYPE_CAST(cData[lPos+1] & $3F) // add 6 bits from next byte (10xxxxxx)
		wcOut[lCharsOut] = TYPE_CAST(nChar)
		lPos++ // skip one byte
	    }
	    ELSE
	    {
		BREAk
	    }
          }

          // 0x800-0xFFFF (2^16), encode as 3 bytes
          // 0xE0 0xA0 0x80 -> 0x0800
          // 0xEF 0xBF 0xBF -> 0xFFFF
          ACTIVE (1):
          {
	    if (lPos+2<=LENGTH_ARRAY(cData))
	    {
		nChar = TYPE_CAST(nChar & $0F) // grab lower 4 bits (1110xxxx)
		nChar = TYPE_CAST(nChar << 12) // shift those 4 bits up leaving room for 12 more bits
		nChar = nChar + TYPE_CAST((cData[lPos+1] & $3F) << 6) // add 6 bits from next byte (10xxxxxx)
		nChar = nChar +  TYPE_CAST(cData[lPos+2] &$3F) // add 6 bits from next next byte (10xxxxxx)
		wcOut[lCharsOut] = TYPE_CAST(nChar)
		lPos = lPos + 2 // skip two bytes
	    }
	    ELSE
	    {
		BREAK
	    }
          }
        }
      }

      // Set length
      SET_LENGTH_ARRAY(wcOut,lCharsOut-1)
    }

    // Add bytes in Unicode (LE) format
    ACTIVE (nFormat == WC_FORMAT_UNICODE):
    {
      // Easy: the marshalling do it for us
      cTemp = cData
      GET_BUFFER_STRING(cTemp,lPos-1)
      nLengthHi = LENGTH_STRING(cTemp) / 2;
      nLengthLo = nLengthHi & $FF;
      nLengthHi = TYPE_CAST(nLengthHi >> 8);
      STRING_TO_VARIABLE(wcOut,"$E6,nLengthHi,nLengthLo,cTemp",1);
    }

    // Add bytes in Unicode (BE) format
    ACTIVE (nFormat == WC_FORMAT_UNICODE_BE):
    {
      FOR (lCharsOut = 1; lPos <= LENGTH_ARRAY(cData); lCharsOut++, lPos = lPos + 2)
        wcOut[lCharsOut] = TYPE_CAST((cData[lPos] * $100) + cData[lPos+1])
      SET_LENGTH_ARRAY(wcOut,lCharsOut-1)
    }

    // TP format - ASCII hex encoded
    ACTIVE (nFormat == WC_FORMAT_TP):
    {
      // Turn every 4 ADCII/HEX chars (BE) into word, i.e. '7FFF' -> 0x7FFF
      FOR (lCharsOut = 1; lPos <= LENGTH_ARRAY(cData); lCharsOut++, lPos = lPos + 4)
        wcOut[lCharsOut] = HEXTOI(MID_STRING(cData,lPos,4))
      SET_LENGTH_ARRAY(wcOut,lCharsOut-1)
    }

    // Active - Unknown or ascii
    ACTIVE (1):
      wcOut = CH_TO_WC(cData)
  }

  // Done
  RETURN wcOut;
}

(********************************************)
(* Call Name: _WC                           *)
(* Function:  Convet Variable Initializer   *)
(*            String to WIDECHAR            *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] _WC(CHAR cData[])
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
INTEGER nLengthHi
INTEGER nLengthLo
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_INT(cData);

  // Matt came up with a great optimization
  // Now I get "hi,lo,hi,lo"
  // However, it may contain the $e6 and length too (depending on preprocessor version)
  // saving on the length calc and string expr. saves about a small amoount of time
  IF (LENGTH_STRING(cData))
  {
    IF (cData[1] = $E6)
      STRING_TO_VARIABLE(wcOut,cData,1);
    ELSE
    {
      nLengthHi = LENGTH_STRING(cData) / 2;
      nLengthLo = nLengthHi & $FF;
      nLengthHi = TYPE_CAST(nLengthHi >> 8);
      STRING_TO_VARIABLE(wcOut,"$E6,nLengthHi,nLengthLo,cData",1);
    }
  }

  // We could do even better by making it really ready for STRING_TO_VAR
  // Now I get "$E6,len hi,len lo,hi,lo,hi,lo"
  // This gives us about 15% speed improvement
  //STRING_TO_VARIABLE(wcOut,cData,1);
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_TO_CH                      *)
(* Function:  Convet WIDECHAR to CHAR       *)
(********************************************)
DEFINE_FUNCTION CHAR[WC_MAX_STRING_SIZE] WC_TO_CH(WIDECHAR wcData[])
STACK_VAR
CHAR cOut[WC_MAX_STRING_SIZE*2]
INTEGER nLoop
INTEGER nChar
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_TO_CH_INT(wcData);

  // Copy bytes one for one, losing upper byte of info
  // Pretty much, ASCII gets converted over
  FOR (nLoop = 1; nLoop <= LENGTH_ARRAY(wcData); nLoop++)
  {
    // Expect Data Loss
    nChar = wcData[nLoop]
    IF (nChar > 255) nChar = 63 //?
    cOut[nLoop] =  TYPE_CAST(nChar)
  }
  SET_LENGTH_STRING(cOut,LENGTH_ARRAY(wcData))
  RETURN cOut;
}

(********************************************)
(* Call Name: CH_TO_WC                      *)
(* Function:  Convert CHAR to WIDECHAR      *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] CH_TO_WC(CHAR cData[])
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
LONG lLoop
INTEGER nChar
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _CH_TO_WC_INT(cData);

  // Just copy bytes one for one
  FOR (lLoop = 1; lLoop <= LENGTH_ARRAY(cData); lLoop++)
    wcOut[lLoop] = cData[lLoop]
  SET_LENGTH_ARRAY(wcOut,LENGTH_ARRAY(cData))
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_FIND_STRING                *)
(* Function:  Find a string in a string     *)
(********************************************)
DEFINE_FUNCTION INTEGER WC_FIND_STRING(WIDECHAR wcData[], WIDECHAR wcFind[], LONG lStart)
STACK_VAR
CHAR cData[WC_MAX_STRING_SIZE*2]
CHAR cFind[WC_MAX_STRING_SIZE*2]
LONG lPos
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FIND_STRING_INT(wcData,wcFind,lStart);

  // Sanity
  IF (LENGTH_ARRAY(wcData) == 0)
    RETURN 0;
  IF (LENGTH_ARRAY(wcFind) == 0)
    RETURN 0;
  IF (lStart == 0)
    RETURN 0;

  // Convert to 8 bit without data loss
  IF (VARIABLE_TO_STRING(wcData,cData,1) < 0)
    RETURN 0;
  IF (VARIABLE_TO_STRING(wcFind,cFind,1) < 0)
    RETURN 0;

  // Remove header bytes from find so it is just the raw bytes
  GET_BUFFER_STRING(cFind,3)

  // Now, try the find.  Skip the header bytes (3 bytes) and start at
  // first high byte (1=4, 2=6, 3=8, etc...)
  lPos = (lStart * 2) + 2
  lPos = FIND_STRING(cData,cFind,lPos)
  IF (lPos == 0)
    RETURN 0;

  // Return 1/2 since WIDECHAR are twice as long and
  // subtract 2 to account for divide and header bytes (i.e. 4=1,6=2,8=3,etc...)
  // since we will always find the match at an odd position (hi-byte)
  RETURN TYPE_CAST((lPos-2)/2);
}

(********************************************)
(* Call Name: WC_LEFT_STRING                *)
(* Function:  get left characters           *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_LEFT_STRING(WIDECHAR wcData[], LONG lCount)
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cTemp[WC_MAX_STRING_SIZE*2]
LONG lLength
INTEGER nLengthHi
INTEGER nLengthLo
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_LEFT_STRING_INT(wcData,lCount);

  // Sanity
  IF (lCount = 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN wcOut;

  // Marshall it
  VARIABLE_TO_STRING(wcData,cTemp,1)

  // Set the length.  Use lCount or length or string, whichever is less
  lLength = MIN_VALUE(lCount,LENGTH_ARRAY(wcData))
  nLengthHi = TYPE_CAST(lLength)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling bytes
  cTemp[2] = TYPE_CAST(nLengthHi)
  cTemp[3] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcOut,cTemp,1)
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_LENGTH_STRING              *)
(* Function:  Return length of string       *)
(********************************************)
DEFINE_FUNCTION LONG WC_LENGTH_STRING(WIDECHAR wcData[])
{
  // No real need for this; it calls to LENGTH_ARRAY anyway.
  // Check master version
  //IF (GET_MASTER_BUILD() >= 65536)
  //  RETURN _WC_LENGTH_STRING_INT(wcData);

  // Easy
  RETURN LENGTH_ARRAY(wcData);
}

(********************************************)
(* Call Name: WC_LOWER_STRING               *)
(* Function:  Lowercase a widechar          *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_LOWER_STRING(WIDECHAR wcData[])
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
LONG lLoop
INTEGER nCharHi
INTEGER nCharLo
INTEGER nPos
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_LOWER_STRING_INT(wcData);

  // Copy all chars
  FOR (lLoop = 1; lLoop <= LENGTH_ARRAY(wcData); lLoop++)
  {
    nCharHi = wcData[lLoop]
    nCharHi = TYPE_CAST(nCharHi >> 8);
    nCharLo = wcData[lLoop]
    nCharLo = nCharLo & $FF;

    // Find the charater at an odd location
    nPos = FIND_STRING(cWCLowerLookup,"nCharHi,nCharLo",1)
    WHILE ((nPos % 2) == 0 && nPos > 0)
      nPos = FIND_STRING(cWCLowerLookup,"nCharHi,nCharLo",1)

    // If found, it can be upper casses
    IF (nPos)
      wcOut[lLoop] = TYPE_CAST(cWCLowerResult[nPos] << 8) + cWCLowerResult[nPos+1]
    ELSE
      wcOut[lLoop] = wcData[lLoop]
  }

  // Set length and return
  SET_LENGTH_ARRAY(wcOut,LENGTH_ARRAY(wcData))
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_MAX_LENGTH_STRING          *)
(* Function:  Return max length of string   *)
(********************************************)
DEFINE_FUNCTION LONG WC_MAX_LENGTH_STRING(WIDECHAR wcData[])
{
  // No real need for this; it calls to WC_MAX_LENGTH_STRING anyway.
  // Check master version
  //IF (GET_MASTER_BUILD() >= 65536)
  //  RETURN _WC_MAX_LENGTH_STRING_INT(wcData);

  // Easy
  RETURN MAX_LENGTH_ARRAY(wcData);
}

(************************************************)
(* Call Name: WC_MID_STRING                     *)
(* Function:  Get string from middles of stirng *)
(************************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_MID_STRING(WIDECHAR wcData[], LONG lStart, LONG lCount)
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cTemp[WC_MAX_STRING_SIZE*2]
INTEGER nLengthHi
INTEGER nLengthLo
LONG lMarshallStart
LONG lTemp
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_MID_STRING_INT(wcData,lStart,lCount);

  // Sanity
  IF (lStart == 0 || lStart > LENGTH_ARRAY(wcData))
    RETURN wcOut;
  IF (lCount == 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN wcOut;

  // Marshall it
  VARIABLE_TO_STRING(wcData,cTemp,1)

  // Set marshall start point
  // Jump ahead from 1 to the point where we want new marshall bytes to start,
  // i.e. 3 bytes before string we really want (which is really lStart*2 + 3 bytes in)
  // subtrack one to start on high byte of character we want (i.e. 1=1, 2=3, 3=5, etc...)
  lMarshallStart = (lStart * 2) - 1

  // Calculate the length, which is the just the count or what is left, whichever is smaller
  lTemp = MIN_VALUE (lCount,LENGTH_ARRAY(wcData) - lStart + 1)
  nLengthHi = TYPE_CAST(lTemp)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling bytes
  cTemp[lMarshallStart]   = $E6
  cTemp[lMarshallStart+1] = TYPE_CAST(nLengthHi)
  cTemp[lMarshallStart+2] = TYPE_CAST(nLengthLo)

  // Marshall it back startig from marshalling point
  STRING_TO_VARIABLE(wcOut,cTemp,lMarshallStart)
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_REMOVE_STRING              *)
(* Function:  remove string from another    *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_REMOVE_STRING(WIDECHAR wcData[], WIDECHAR wcRemove[], LONG lStart)
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cData[WC_MAX_STRING_SIZE*2]
CHAR cRemove[WC_MAX_STRING_SIZE*2]
LONG lTempStart
LONG lLength
INTEGER nLengthHi
INTEGER nLengthLo
LONG lMarshallStart
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_REMOVE_STRING_INT(wcData,wcRemove,lStart);

  // Sanity
  IF (lStart == 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcRemove) = 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN wcOut;

  // Marshall it
  VARIABLE_TO_STRING(wcData,cData,1)
  VARIABLE_TO_STRING(wcRemove,cRemove,1)
  GET_BUFFER_STRING(cRemove,3)

  // Remove it, start at position that accounts for 2 byte charaters and header bytes
  // (i.e. 1=4,2=6,3=8, etc...)
  lTempStart = (lStart * 2) + 2
  cRemove = REMOVE_STRING(cData, cRemove, lTempStart)

  // See if anything happened.  If not, we can just return the emptry string
  // and leave wcData alone
  IF (LENGTH_STRING(cRemove) == 0)
    RETURN wcOut;

  // Fix the length of the resulting string.  It will be the length of wcData
  // minus cRemove / 2
  nLengthHi = LENGTH_ARRAY(wcData) - (LENGTH_STRING(cRemove) / 2)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Marshall the string back into the param.
  cData[2] = TYPE_CAST(nLengthHi)
  cData[3] = TYPE_CAST(nLengthLo)
  STRING_TO_VARIABLE(wcData,cData,1)

  // Create remove.  The length is 1/2 of the string we removed
  nLengthHi = LENGTH_STRING(cRemove) / 2;
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);
  STRING_TO_VARIABLE(wcOut,"$E6,nLengthHi,nLengthLo,cRemove",1)

  // Return
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_RIGHT_STRING               *)
(* Function:  Get right characters          *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_RIGHT_STRING(WIDECHAR wcData[], LONG lCount)
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cData[WC_MAX_STRING_SIZE*2]
INTEGER nLengthHi
INTEGER nLengthLo
LONG lMarshallStart
LONG lTemp
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_RIGHT_STRING_INT(wcData,lCount);

  // Sanity
  IF (lCount = 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN wcOut;

  // Marshall it
  VARIABLE_TO_STRING(wcData,cData,1)

  // Set marshall start point
  // From the end of the string, back up 2 * the number of characters
  // then back up another 2, giving us 3 bytes before the start of our data
  lTemp = MIN_VALUE(LENGTH_ARRAY(wcData),lCount)
  lMarshallStart = LENGTH_STRING(cData) - TYPE_CAST(lTemp * 2) - 2
  nLengthHi = TYPE_CAST(lTemp)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling bytes
  cData[lMarshallStart]   = $E6
  cData[lMarshallStart+1] = TYPE_CAST(nLengthHi)
  cData[lMarshallStart+2] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcOut,cData,lMarshallStart)
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_SET_LENGTH_STRING          *)
(* Function:  Set length of string          *)
(********************************************)
DEFINE_FUNCTION LONG WC_SET_LENGTH_STRING(WIDECHAR wcData[], LONG lLen)
{
  // No real need for this; it calls to SET_LENGTH_ARRAY anyway.
  // Check master version
  //IF (GET_MASTER_BUILD() >= 65536)
  //  RETURN _WC_SET_LENGTH_STRING_INT(wcData,lLen);

  // Easy
  RETURN SET_LENGTH_ARRAY(wcData,lLen);
}

(********************************************)
(* Call Name: WC_UPPER_STRING               *)
(* Function:  Uppercase a widechar          *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_UPPER_STRING(WIDECHAR wcData[])
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
LONG lLoop
INTEGER nCharHi
INTEGER nCharLo
INTEGER nPos
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_UPPER_STRING_INT(wcData);

  // Copy all chars
  FOR (lLoop = 1; lLoop <= LENGTH_ARRAY(wcData); lLoop++)
  {
    nCharHi = wcData[lLoop]
    nCharHi = TYPE_CAST(nCharHi >> 8);
    nCharLo = wcData[lLoop]
    nCharLo = nCharLo & $FF;

    // Find the charater at an odd location
    nPos = FIND_STRING(cWCUpperLookup,"nCharHi,nCharLo",1)
    WHILE ((nPos % 2) == 0 && nPos > 0)
      nPos = FIND_STRING(cWCUpperLookup,"nCharHi,nCharLo",1)

    // If found, it can be upper casses
    IF (nPos)
      wcOut[lLoop] = TYPE_CAST(cWCUpperResult[nPos] << 8) + cWCUpperResult[nPos+1]
    ELSE
      wcOut[lLoop] = wcData[lLoop]
  }

  // Set length and return
  SET_LENGTH_ARRAY(wcOut,LENGTH_ARRAY(wcData))
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_COMPARE_STRING             *)
(* Function:  Compare two widechars         *)
(********************************************)
DEFINE_FUNCTION SINTEGER WC_COMPARE_STRING(WIDECHAR wcData1[], WIDECHAR wcData2[])
STACK_VAR
CHAR cData1[WC_MAX_STRING_SIZE*2]
CHAR cData2[WC_MAX_STRING_SIZE*2]
LONG lLoop
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_COMPARE_STRING_INT(wcData1,wcData2);

  // Convert to 8 bit without data loss
  IF (VARIABLE_TO_STRING(wcData1,cData1,1) < 0)
    RETURN 0;

  IF (VARIABLE_TO_STRING(wcData2,cData2,1) < 0)
    RETURN 0;

  // Now, make any "?" sequence into "??" so as to match any 16-bit character
  // Skp header bytes ($E6,len-hi,len-lo)
  lLoop = FIND_STRING(cData1,"0,63",4)
  WHILE (lLoop)
  {
    // Only convert characters where 0 is high-byte
    IF ((lLoop % 2) = 0)
      cData1[lLoop] = 63
    lLoop = FIND_STRING(cData1,"0,63",lLoop + 2)
  }
  lLoop = FIND_STRING(cData2,"0,63",4)
  WHILE (lLoop)
  {
    // Only convert characters where 0 is high-byte
    IF ((lLoop % 2) = 0)
      cData2[lLoop] = 63
    lLoop = FIND_STRING(cData2,"0,63",lLoop + 2)
  }

  // Now, let COMPARE_STRING handle it
  // Since conversions will be equivalent and bytes that were "?" are now
  // "??", compare will do the right job.
  RETURN COMPARE_STRING(cData1,cData2);
}

(********************************************)
(* Call Name: WC_GET_BUFFER_CHAR            *)
(* Function:  Get a character from widechar *)
(********************************************)
DEFINE_FUNCTION WIDECHAR WC_GET_BUFFER_CHAR(WIDECHAR wcData[])
STACK_VAR
CHAR cData[WC_MAX_STRING_SIZE*2]
WIDECHAR wchCharOut
INTEGER nLengthHi
INTEGER nLengthLo
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_GET_BUFFER_CHAR_INT(wcData);

  // Sanity
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN 0;

  // Get first char to return, the mid string from 2 to end
  wchCharOut = wcData[1]

  // Marshall it.  Length is current length minus 1
  VARIABLE_TO_STRING(wcData,cData,1)
  nLengthHi = LENGTH_ARRAY(wcData)-1
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling bytes
  cData[3] = $E6
  cData[4] = TYPE_CAST(nLengthHi)
  cData[5] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcData,cData,3)
  RETURN wchCharOut;
}

(********************************************)
(* Call Name: WC_GET_BUFFER_STRING          *)
(* Function:  Get X chars from a widechar   *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_GET_BUFFER_STRING(WIDECHAR wcData[],LONG lCount)
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cData[WC_MAX_STRING_SIZE*2]
LONG lLength
LONG lReturn
LONG lStart
INTEGER nLengthHi
INTEGER nLengthLo
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_GET_BUFFER_STRING_INT(wcData,lCount);

  // Sanity
  IF (lCount == 0)
    RETURN wcOut;
  IF (LENGTH_ARRAY(wcData) = 0)
    RETURN wcOut;
  IF (lCount > LENGTH_ARRAY(wcData))
  {
    wcOut = wcData
    SET_LENGTH_ARRAY(wcData,0)
    RETURN wcOut;
  }

  // Count how many character to return
  lReturn = LENGTH_ARRAY(wcData) - lCount

  // Marshall it, store the original length
  VARIABLE_TO_STRING(wcData,cData,1)

  // Get string to return
  // The the length of the marshalled string to include bytes we want and 3 header bytes
  nLengthHi = TYPE_CAST(lCount)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling length bytes
  cData[2] = TYPE_CAST(nLengthHi)
  cData[3] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcOut,cData,1)

  // Now, rebuild original string
  // Add marshalling bytes 3 bytes before our data
  // i.e. 1=3, 2=5, 3=7, etc...
  lStart = (lCount * 2) + 1
  nLengthHi = TYPE_CAST(lReturn)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling length bytes
  cData[lStart]   = $E6
  cData[lStart+1] = TYPE_CAST(nLengthHi)
  cData[lStart+2] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcData,cData,lStart)

  // Return string of first lCount characters
  RETURN wcOut;
}

(********************************************)
(* Call Name: WC_CONCAT_STRING              *)
(* Function:  Add two strings               *)
(********************************************)
DEFINE_FUNCTION WIDECHAR[WC_MAX_STRING_SIZE] WC_CONCAT_STRING(WIDECHAR wcData1[],WIDECHAR wcData2[])
STACK_VAR
WIDECHAR wcOut[WC_MAX_STRING_SIZE]
CHAR cData[WC_MAX_STRING_SIZE*2]
LONG lStart
INTEGER nLengthHi
INTEGER nLengthLo
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_CONCAT_STRING_INT(wcData1,wcData2);

  // First, copy string 2.  Start we we expect string 1 to finish marshalling
  // let's not account for the 3 header bytes for string 1; string 1 will
  // marshall into the first 3 bytes of our string, which is just our header bytes
  // i.e. length of 1=3, length of 2=5, length of 3=7
  lStart = (LENGTH_ARRAY(wcData1) * 2) + 1
  VARIABLE_TO_STRING(wcData2,cData,lStart)

  // Now, marshalling string 1 in there.  Allow end of string 1
  // to overwrite the header bytes of string 2
  VARIABLE_TO_STRING(wcData1,cData,1)

  // Now, fix the length of the marshalled string
  nLengthHi = LENGTH_ARRAY(wcData1) + LENGTH_ARRAY(wcData2)
  nLengthLo = nLengthHi & $FF;
  nLengthHi = TYPE_CAST(nLengthHi >> 8);

  // Copy marshalling bytes
  cData[2] = TYPE_CAST(nLengthHi)
  cData[3] = TYPE_CAST(nLengthLo)

  // Marshall it back
  STRING_TO_VARIABLE(wcOut,cData,1)
  RETURN wcOut;
}

(********************************************)
(* Call Name: __WC_EXPLODE_FILE_HANDLE      *)
(* Function:  Extract FileH and Format      *)
(********************************************)
DEFINE_FUNCTION __WC_EXPLODE_FILE_HANDLE(SLONG slFile,SLONG slFileH,INTEGER nFormat)
STACK_VAR
LONG lTemp
{
  // Strip of upper 4 bits (1 sign, 3 format)
  lTemp = TYPE_CAST(slFile)
  lTemp = lTemp & $0FFFFFFF
  slFileH = TYPE_CAST(lTemp)

  // Get format from bits 29-31
  lTemp = TYPE_CAST(slFile)
  lTemp = (lTemp & $70000000) >> 28
  nFormat = TYPE_CAST(lTemp)
  RETURN;
}

(********************************************)
(* Call Name: __WC_COMPOSE_FILE_HANDLE      *)
(* Function:  Combine FileH and Format      *)
(********************************************)
DEFINE_FUNCTION SLONG __WC_COMPOSE_FILE_HANDLE(SLONG slFileH,INTEGER nFormat)
STACK_VAR
SLONG slFile
LONG lTemp
{
  // Start with file handle
  slFile = slFileH

  // Now, embed the format into the file handle to I can use it later.
  // Hower, only put it in bits 30 and 31 so we don't make it negative
  // since "slFile < 0" is a common error check
  // Format uses 3 bites (1-4) so put it in bits 29-30
  lTemp = TYPE_CAST(slFile)
  lTemp = lTemp + TYPE_CAST(nFormat << 28)
  slFile = TYPE_CAST(lTemp)
  RETURN slFile;
}

(********************************************)
(* Call Name: __WC_GET_FILE_HEADER          *)
(* Function:   Get File header for Format   *)
(********************************************)
DEFINE_FUNCTION CHAR[3] __WC_GET_FILE_HEADER(INTEGER nFormat)
STACK_VAR
CHAR cBOM[3]
{
  cBOM = ""
  SWITCH (nFormat)
  {
    // Add 0xEF 0xBB 0xBF (UTF-8 Format)
    CASE WC_FORMAT_UTF8:
      cBOM = "$EF,$BB,$BF"

    // Add 0xFEFF in LE format (Unicode Format)
    CASE WC_FORMAT_UNICODE:
      cBOM = "$FF,$FE"

    // Add 0xFEFF in BE format (Unicode Format)
    CASE WC_FORMAT_UNICODE_BE:
      cBOM = "$FE,$FF"
  }
  RETURN cBOM;
}

(********************************************)
(* Call Name: __WC_GET_FILE_FORMAT           *)
(* Function:   Get File Format from header  *)
(********************************************)
DEFINE_FUNCTION INTEGER __WC_GET_FILE_FORMAT(CHAR cBOM[])
{
  // Determine format if it is contained in the string
  // Look for 0xFEFF in LE format (Unicode Format)
  IF (LEFT_STRING(cBOM,2) = "$FF,$FE")
    RETURN WC_FORMAT_UNICODE;

  // Look for 0xFEFF in BE format (Unicode Format)
  IF (LEFT_STRING(cBOM,2) = "$FE,$FF")
    RETURN WC_FORMAT_UNICODE_BE;

  // Look for 0xEF 0xBB 0xBF (UTF-8 Format)
  IF (LEFT_STRING(cBOM,3) = "$EF,$BB,$BF")
   RETURN WC_FORMAT_UTF8;

  // Nothing else?
  RETURN WC_FORMAT_ASCII;
}

(********************************************)
(* Call Name: WC_FILE_OPEN                  *)
(* Function:  File Open for Unicode         *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_OPEN(CHAR cFile[],LONG lFlags,INTEGER nFormat)
STACK_VAR
SLONG slFile
SLONG slResult
SLONG slTemp
CHAR cBOM[3]
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_OPEN_INT(cFile,lFlags,nFormat);

  // Check nFormat when writing
  IF (lFlags == FILE_RW_NEW)
  {
    IF (nFormat != WC_FORMAT_UNICODE && nFormat != WC_FORMAT_UNICODE_BE &&
        nFormat != WC_FORMAT_UTF8 && nFormat != WC_FORMAT_TP)
    {
      slTemp = 0
      slTemp = slTemp - 15;  // Avoid the amazing ambiguous converting SINTEGER to SINTEGER warning
      RETURN slTemp;
    }
  }

  // This is pretty easy.   FILE_OPEN does most of the work
  slFile = FILE_OPEN(cFile,lFlags)
  IF (slFile < 0)
    RETURN slFile;

  SELECT
  {
    // Now, we need to figure out the format is reading or appending
    ACTIVE (lFlags == FILE_READ_ONLY || lFlags == FILE_RW_APPEND):
    {
      slResult = FILE_SEEK(slFile,0)
      slResult = FILE_READ(slFile,cBOM,3)
      nFormat = __WC_GET_FILE_FORMAT(cBOM)

      // Skip over header bytes
      SELECT
      {
        // If append, just jump to end
        ACTIVE (TYPE_CAST(lFlags) == FILE_RW_APPEND):
        {
          slTemp = 0
          slTemp = slTemp - 1;
          slResult = FILE_SEEK(slFile,TYPE_CAST(slTemp))
        }

        // If UTF-8, jump 3 bytes
        ACTIVE (nFormat == WC_FORMAT_UTF8):
          slResult = FILE_SEEK(slFile,3)

        // If Unicode BE or LE, jump 2 bytes
        ACTIVE (nFormat == WC_FORMAT_UNICODE || nFormat == WC_FORMAT_UNICODE_BE):
          slResult = FILE_SEEK(slFile,2)

        // If not any of these, goto start of file
        ACTIVE (1):
          slResult = FILE_SEEK(slFile,0)
      }
    }

    // See if we are writing
    ACTIVE (lFlags == FILE_RW_NEW):
    {
      // Add formatting to file
      cBOM = __WC_GET_FILE_HEADER(nFormat)
      IF (LENGTH_STRING(cBOM))
        slResult = FILE_WRITE(slFile,cBOM,LENGTH_ARRAY(cBOM))
    }
  }

  // Now, returned a "composed" file handle so we have the format for read/write/etc...
  RETURN __WC_COMPOSE_FILE_HANDLE(slFile,nFormat);
}

(********************************************)
(* Call Name: WC_FILE_CLOSE                 *)
(* Function:  Close file                    *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_CLOSE(SLONG slFile)
STACK_VAR
SLONG slFileH
INTEGER nDummy
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_CLOSE_INT(slFile);

  // The easiest of all
  __WC_EXPLODE_FILE_HANDLE(slFile,slFileH,nDummy)
  RETURN FILE_CLOSE(slFileH);
}

(********************************************)
(* Call Name: WC_FILE_READ                  *)
(* Function:  Read from file                *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_READ(SLONG slFile,WIDECHAR wcData[], LONG lChars)
STACK_VAR
SLONG slFileH
INTEGER nFormat
SLONG slResult
CHAR cData[WC_MAX_STRING_SIZE*2]
CHAR cTempData[3]
WIDECHAR wcTemp[WC_MAX_STRING_SIZE]
LONG lRemain
LONG lPos
LONG lTempPos
LONG lByteCount
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_READ_INT(slFile,wcData,lChars);

  // Check to see if we have room
  IF (MAX_LENGTH_ARRAY(cData) < (lChars*2))
    RETURN -6; // Invalid Parameter

  // Get real file handle AND FORMAT
  __WC_EXPLODE_FILE_HANDLE(slFile,slFileH,nFormat)

  SELECT
  {
    // Unicode (LE or BE)
    ACTIVE (nFormat == WC_FORMAT_UNICODE || nFormat == WC_FORMAT_UNICODE_BE):
    {
      // First, let's read in twice the number of bytes as we want chars
      slResult = FILE_READ(slFileH,cData,lChars*2);
      IF (slResult < 0)
        RETURN slResult;

      // Now convert.
      lPos = 1
      wcData = WC_DECODE(cData, nFormat, lPos)
      //IF (bWCDebug)
      //  SEND_STRING 0,"'WC_FILE_READ: Unicode decoded, got ',ITOA(LENGTH_ARRAY(wcData)),' chars when I wanted ',ITOA(lChars)"
   }
    // UTF-8
    ACTIVE (nFormat == WC_FORMAT_UTF8):
    {
      // First, let's read the number of bytes as we want chars
      slResult = FILE_READ(slFileH,cData,lChars);
      IF (slResult < 0)
        RETURN slResult;
      lByteCount = TYPE_CAST(slResult);

      // Now convert.  We will likely get less chars than we want but it is possible we will
      // hit is spot on.  Let's just try it.
      lPos = 1
      wcData = WC_DECODE(cData,nFormat,lPos)

      SELECT
      {
        // Did we read the whole file already?
        ACTIVE (lByteCount < lChars): {}

        // Now, how much is left to read
        ACTIVE (LENGTH_ARRAY(wcData) < lChars):
        {
          // This is pretty crappy.  We will have to read very small sections of the file until
          // we meet the required number of bytes.  Since we cannot get the file position from a NetLinx
          // API, we will not be able to re-position the file position if we overshoot
          lRemain = lChars - LENGTH_ARRAY(wcData)
          //IF (bWCDebug)
          //  SEND_STRING 0,"'WC_FILE_READ: Need to read ',ITOA(lRemain),' more chars'"
          WHILE (lRemain)
          {
            slResult = FILE_READ(slFileH,cTempData,1);
            cData = "cData,cTempData"
            SELECT
            {
              // Read Failed - File is out of chars
              ACTIVE (slResult < 0): {}

              // Need 2 more bytes
              ACTIVE ((cTempData[1] & $E0) == $E0):
              {
                slResult = FILE_READ(slFileH,cTempData,2)
                cData = "cData,cTempData"
                //IF (bWCDebug)
                //  SEND_STRING 0,"'WC_FILE_READ: Found a 3 byte character'"
              }
              // Need 1 more byte
              ACTIVE ((cTempData[1] & $C0) == $C0):
              {
                slResult = FILE_READ(slFileH,cTempData,1);
                cData = "cData,cTempData"
                //IF (bWCDebug)
                //  SEND_STRING 0,"'WC_FILE_READ: Found a 2 byte character'"
              }
            }

            // Now, decode
            IF (slResult > 0)
            {
              lTempPos = lPos
              wcTemp = WC_DECODE(cData, nFormat, lTempPos)
              lRemain = lChars - LENGTH_ARRAY(wcData) - LENGTH_ARRAY(wcTemp)
              //IF (bWCDebug)
              //  SEND_STRING 0,"'WC_FILE_READ: decoded that characters, now I need ',ITOA(lRemain),' more.'"
            }
            ELSE
              lRemain = 0;
          }

          // Now, add two widechars together
          wcData = WC_CONCAT_STRING(wcData,wcTemp)
        }

        // This would be perfect (not likely)
        ACTIVE (LENGTH_ARRAY(wcData) == lChars):
        {
          //IF (bWCDebug)
          //  SEND_STRING 0,"'WC_FILE_READ: Read number of UTF-8 bytes right the first time (it was all ASCII))'"
        }

        // This is very bad...
        ACTIVE (1):
          SEND_STRING 0,"'WC_READ overshot the target in UTF-8, file pointer is way off now...'"
      }

      // Return byte count
      slResult = TYPE_CAST(lByteCount);
    }

    // For ASCII, this is VERY easy
    ACTIVE (1):
    {
      // Just read # of chars and stuff into widechar
      slResult = FILE_READ(slFileH,cData,lChars)
      wcData = CH_TO_WC(cData)
    }
  }

  // Return last read result
  RETURN slResult;
}

(********************************************)
(* Call Name: WC_FILE_READ_LINE             *)
(* Function:  Read a line from a file       *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_READ_LINE(SLONG slFile,WIDECHAR wcData[], LONG lChars)
STACK_VAR
SLONG slFileH
INTEGER nFormat
SLONG slResult
CHAR cData[WC_MAX_STRING_SIZE*2]
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_READ_LINE_INT(slFile,wcData,lChars);

  // Check to see if we have room
  IF (MAX_LENGTH_ARRAY(cData) < (lChars*2))
    RETURN -6; // Invalid Parameter

  // Get real file handle AND FORMAT
  __WC_EXPLODE_FILE_HANDLE(slFile,slFileH,nFormat)

  SELECT
  {
    // Unicode (LE or BE)
    ACTIVE (nFormat == WC_FORMAT_UNICODE || nFormat == WC_FORMAT_UNICODE_BE || nFormat == WC_FORMAT_UTF8):
    {
      // First, let's read in twice the number of bytes as we want chars
      slResult = FILE_READ_LINE(slFileH,cData,lChars*2);

      // Now convert.
      wcData = WC_DECODE(cData, nFormat,1)

      // Make sure we did not get too much data
      // because UTF8 may have more characters than we wanted
      IF (LENGTH_ARRAY(wcData) > lChars)
        SET_LENGTH_ARRAY(wcData,lChars)
    }

    // Else, just regular
    ACTIVE (1):
    {
      // Just read # of chars and stuff into widechar
      slResult = FILE_READ_LINE(slFileH,cData,lChars)
      wcData = CH_TO_WC(cData)
    }
  }

  // Return last read result
  RETURN slResult;
}

(********************************************)
(* Call Name: WC_FILE_WRITE                 *)
(* Function:  Write to a file               *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_WRITE(SLONG slFile, WIDECHAR wcData[], LONG lChars)
STACK_VAR
SLONG slFileH
INTEGER nFormat
CHAR cData[WC_MAX_STRING_SIZE*2]
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_WRITE_INT(slFile,wcData,lChars);

  // Get real file handle AND FORMAT
  __WC_EXPLODE_FILE_HANDLE(slFile,slFileH,nFormat)

  // Get data for file
  cData = WC_ENCODE(WC_LEFT_STRING(wcData,lChars),nFormat,1)
  RETURN FILE_WRITE(slFileH,cData,LENGTH_ARRAY(cData));
}

(********************************************)
(* Call Name: WC_FILE_WRITE_LINE            *)
(* Function:  Write a line to a file        *)
(********************************************)
DEFINE_FUNCTION SLONG WC_FILE_WRITE_LINE(SLONG slFile, WIDECHAR wcData[], LONG lChars)
STACK_VAR
SLONG slFileH
INTEGER nFormat
CHAR cData[WC_MAX_STRING_SIZE*2]
{
  // Check master version
  IF (GET_MASTER_BUILD() >= 65536)
    RETURN _WC_FILE_WRITE_LINE_INT(slFile,wcData,lChars);

  // Get real file handle AND FORMAT
  __WC_EXPLODE_FILE_HANDLE(slFile,slFileH,nFormat)

  // Get data for file
  cData = WC_ENCODE(WC_LEFT_STRING(wcData,lChars),nFormat,1)
  RETURN FILE_WRITE(slFileH,cData,LENGTH_ARRAY(cData));
}

(********************************************)
(* Call Name: WC_TP_ENCODE                  *)
(* Function:  Encode Widechar for TP        *)
(********************************************)
DEFINE_FUNCTION CHAR[WC_MAX_STRING_SIZE] WC_TP_ENCODE(WIDECHAR wcData[])
{
  // No real need for this; it calls to WC_ENCODE to let that one be ported.
  // Check master version
  //IF (GET_MASTER_BUILD() >= 65536)
  //  RETURN _WC_TP_ENCODE_INT(slFile,wcData,lChars);

  RETURN WC_ENCODE(wcData,WC_FORMAT_TP,1)
}

#END_IF // __UNICODE_LIB__
(***********************************************************)
(*                     END OF PROGRAM                      *)
(*        DO NOT PUT ANY CODE BELOW THIS COMMENT           *)
(***********************************************************)